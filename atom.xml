<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rplees person blog</title>
  
  <subtitle>rplees&#39;s persion blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rplees.com/"/>
  <updated>2019-07-16T07:58:36.000Z</updated>
  <id>http://rplees.com/</id>
  
  <author>
    <name>rplees</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS面试题</title>
    <link href="http://rplees.com/2018/04/19/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://rplees.com/2018/04/19/JS面试题/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2019-07-16T07:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下面的代码输出什么"><a href="#下面的代码输出什么" class="headerlink" title="下面的代码输出什么"></a>下面的代码输出什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x; <span class="comment">// 声明 x</span></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> y);</span><br><span class="line"><span class="built_in">console</span>.log(z);</span><br></pre></td></tr></table></figure><h2 id="下面的代码输出什么？"><a href="#下面的代码输出什么？" class="headerlink" title="下面的代码输出什么？"></a>下面的代码输出什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;) &#123;</span><br><span class="line">    y += <span class="keyword">typeof</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br></pre></td></tr></table></figure><h2 id="JavaScript中什么是闭包？"><a href="#JavaScript中什么是闭包？" class="headerlink" title="JavaScript中什么是闭包？"></a>JavaScript中什么是闭包？</h2><h2 id="写一个mul函数，使用方法如下。"><a href="#写一个mul函数，使用方法如下。" class="headerlink" title="写一个mul函数，使用方法如下。"></a>写一个mul函数，使用方法如下。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)); <span class="comment">// output : 24</span></span><br><span class="line"><span class="built_in">console</span>.log(mul(<span class="number">4</span>)(<span class="number">3</span>)(<span class="number">4</span>)); <span class="comment">// output : 48</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript怎么清空数组？"><a href="#JavaScript怎么清空数组？" class="headerlink" title="JavaScript怎么清空数组？"></a>JavaScript怎么清空数组？</h2><h2 id="怎么判断一个object是否是数组-array"><a href="#怎么判断一个object是否是数组-array" class="headerlink" title="怎么判断一个object是否是数组(array)"></a>怎么判断一个object是否是数组(array)</h2><h2 id="下面代码输出什么？"><a href="#下面代码输出什么？" class="headerlink" title="下面代码输出什么？"></a>下面代码输出什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> output = (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure><h2 id="下面代码输出什么？-1"><a href="#下面代码输出什么？-1" class="headerlink" title="下面代码输出什么？"></a>下面代码输出什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = [<span class="string">"xyz"</span>,<span class="string">"xxxx"</span>,<span class="string">"test"</span>,<span class="string">"ryan"</span>,<span class="string">"apple"</span>];</span><br><span class="line"><span class="keyword">delete</span> trees[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(trees.length);</span><br></pre></td></tr></table></figure><h2 id="下面代码输出什么？-2"><a href="#下面代码输出什么？-2" class="headerlink" title="下面代码输出什么？"></a>下面代码输出什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bar + <span class="number">0</span>);   </span><br><span class="line"><span class="built_in">console</span>.log(bar + <span class="string">"xyz"</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(bar + <span class="literal">true</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(bar + <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="两种函数声明有什么区别？"><a href="#两种函数声明有什么区别？" class="headerlink" title="两种函数声明有什么区别？"></a>两种函数声明有什么区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Some code</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Some code</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="HTTPRequestXML-原理"><a href="#HTTPRequestXML-原理" class="headerlink" title="HTTPRequestXML 原理"></a>HTTPRequestXML 原理</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下面的代码输出什么&quot;&gt;&lt;a href=&quot;#下面的代码输出什么&quot; class=&quot;headerlink&quot; title=&quot;下面的代码输出什么&quot;&gt;&lt;/a&gt;下面的代码输出什么&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="面试" scheme="http://rplees.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="http://rplees.com/tags/JS/"/>
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>后台技术架构文档</title>
    <link href="http://rplees.com/2018/04/19/%E5%90%8E%E5%8F%B0%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%96%87%E6%A1%A3/"/>
    <id>http://rplees.com/2018/04/19/后台技术架构文档/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2019-07-16T08:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>后台技术架构文档-<code>精洲华娱</code></p><blockquote><p>文档归公司内部使用</p></blockquote><h2 id="开发模式-小步快走，快速迭代"><a href="#开发模式-小步快走，快速迭代" class="headerlink" title="开发模式- 小步快走，快速迭代"></a>开发模式- 小步快走，快速迭代</h2><blockquote><p>使用<code>敏捷开发</code>模式开发,敏捷方法是试图通过小型的. 自我管理的团队用短小的合作发布周期来鼓励迭代式软件开发方法.软件的质量贯穿敏捷软件开发每一个阶段.且非常重要,来保证能在每一个迭代周期内及早是的发现并及时相应消灭开发过程中出现错误.</p></blockquote><p><img src="%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png" alt></p><h6 id="传统方法瀑布开发模型"><a href="#传统方法瀑布开发模型" class="headerlink" title="传统方法瀑布开发模型"></a>传统方法瀑布开发模型</h6><blockquote><p>瀑布模型[Waterfall Model]最早强调系统开发应有完整生命周期，且必须完整的经历周期中每一开发阶段，并系统化的考量分析与设计的技术、时间与资源之投入等，因此瀑布模型又可以称为‘系统发展生命周期’[System Development Life Cycle, SDLC]。由于该模式强调系统开发过程需有完整的规划、分析、设计、测试及文件等管理与控制，因此能有效的确保系统品质</p></blockquote><p><img src="%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png" alt></p><h2 id="数据库产品"><a href="#数据库产品" class="headerlink" title="数据库产品"></a>数据库产品</h2><h6 id="软件优化"><a href="#软件优化" class="headerlink" title="软件优化"></a>软件优化</h6><ul><li>正确使用MyISAM和InnoDB存储引擎,尽可能使用InnoDB</li><li>正确使用索引</li><li>避免使用 select *</li><li>字段尽可能的设置 非NULL</li></ul><h6 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h6><ul><li>增加物理内存</li><li>增加应用缓存</li><li>使用SSD硬盘</li></ul><h6 id="架构优化"><a href="#架构优化" class="headerlink" title="架构优化"></a>架构优化</h6><ul><li>读写分离</li></ul><p><img src="%E6%95%B0%E6%8D%AE%E5%BA%93_%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96.png" alt></p><h2 id="服务器系统"><a href="#服务器系统" class="headerlink" title="服务器系统"></a>服务器系统</h2><ul><li>CentOS(阿里ECS4台)</li><li>Nginx前置机(负载均衡单机)</li><li>SLB负载均衡集群</li><li>发布脚本</li><li>分布式部署</li></ul><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2.png" alt></p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><blockquote><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p></blockquote><h6 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h6><blockquote><p>场景说明：用户注册后，需要发送注册邮件和发送注册信息，传统的做法有两种：串行方式、并行方式</p></blockquote><h6 id="串行方式"><a href="#串行方式" class="headerlink" title="串行方式"></a>串行方式</h6><p>将注册信息写入数据库成功后，发送注册邮件，然后发送注册短信，而所有任务执行完成后，返回信息给客户端</p><p><img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E4%B8%B2%E8%A1%8C.png" alt></p><h6 id="并行方式"><a href="#并行方式" class="headerlink" title="并行方式"></a>并行方式</h6><p>将注册信息写入数据库成功后，同时进行发送注册邮件和发送注册短信的操作。而所有任务执行完成后，返回信息给客户端。同串行方式相比，并行方式可以提高执行效率，减少执行时间。</p><p><img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E5%B9%B6%E8%A1%8C.png" alt></p><h6 id="消息队列-1"><a href="#消息队列-1" class="headerlink" title="消息队列"></a>消息队列</h6><p>引入消息队列，将不是必须的业务逻辑，异步进行处理，由此改造出来的流程为</p><p><img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png" alt></p><p>传统方式具有如下缺点：</p><ul><li>假设库存系统访问失败，则订单减少库存失败，导致订单创建失败</li><li>订单系统同库存系统过度耦合</li></ul><p>使用消息队列:</p><ul><li>订单系统：用户下单后，订单系统进行数据持久化处理，然后将消息写入消息队列，返回订单创建成功</li><li>库存系统：使用拉/推的方式，获取下单信息，库存系统根据订单信息进行库存操作。<br><img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97_%E5%BA%94%E7%94%A8%E8%A7%A3%E8%80%A6.png" alt></li></ul><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><blockquote><p>日志处理是指将消息队列用在日志处理中，使用<code>ELK</code>(<code>Elasticsearch</code>+<code>Logstash</code>+<code>Kibana</code>)可用于解决：</p><ul><li>分布式日志数据集中式查询和管理</li><li>系统监控，包含系统硬件和应用各个组件的监控</li><li>故障排查</li><li>安全信息和事件管理</li><li>报表功能</li></ul></blockquote><p><img src="%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86.png" alt></p><p>日志收集系统工作方式<br><img src="%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F.png" alt></p><h2 id="用户验证方案"><a href="#用户验证方案" class="headerlink" title="用户验证方案"></a>用户验证方案</h2><blockquote><p>App操作中经常涉及用户登录操作，登录就需要使用到用户名和密码，为了安全起见，在登录过程中暴漏密码的次数越少越好。</p></blockquote><h6 id="使用HTTPS协议"><a href="#使用HTTPS协议" class="headerlink" title="使用HTTPS协议"></a>使用HTTPS协议</h6><blockquote><p>HTTPS协议是 HTTP协议 和 SSL／TLS协议 的组合。其是一个安全通信通道，基于HTTP开发，用于在客户计算机和App后台之间交换信息。其使用安全套接字层（SSL）进行信息交换，简单来说就是HTTP的安全版。</p></blockquote><h6 id="JSON作为数据交换格式"><a href="#JSON作为数据交换格式" class="headerlink" title="JSON作为数据交换格式"></a>JSON作为数据交换格式</h6><blockquote><p>JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，易于编写，也易于机器解析和生成，而且对比XML更省流量，这些特性使得JSON成为理想的数据交换语言。</p></blockquote><h6 id="用户验证"><a href="#用户验证" class="headerlink" title="用户验证"></a>用户验证</h6><blockquote><p>传统Web网站使用Cookie+Session保持用户的登录状态，App后台则使用token进行验证</p></blockquote><p><img src="%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81.png" alt></p><h2 id="用户动态订阅-推送方案"><a href="#用户动态订阅-推送方案" class="headerlink" title="用户动态订阅/推送方案"></a>用户动态订阅/推送方案</h2><blockquote><p>使用典型的<code>Feed</code>流系统</p></blockquote><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ul><li><code>Feed</code>：Feed流中的每一条状态或者消息都是Feed，比如朋友圈中的一个状态就是一个Feed，微博中的一条微博就是一个Feed。<br>Feed流：持续更新并呈现给用户内容的信息流。每个人的朋友圈，微博关注页等等都是一个Feed流。</li><li><code>Timeline</code>：Timeline其实是一种Feed流的类型，微博，朋友圈都是Timeline类型的Feed流，但是由于Timeline类型出现最早，使用最广泛，最为人熟知，有时候也用Timeline来表示Feed流。</li><li>``关注页Timeline`：展示其他人Feed消息的页面，比如朋友圈，微博的首页等。</li><li>``个人页Timeline`：展示自己发送过的Feed消息的页面，比如微信中的相册，微博的个人页等。</li></ul><h6 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h6><ul><li><code>多账号内容流</code>：Feed流系统中肯定会存在成千上万的账号，账号之间可以关注，取关，加好友和拉黑等操作。只要满足这一条，那么就可以当做Feed流系统来设计。</li><li><code>非稳定的账号关系</code>：由于存在关注，取关等操作，所以系统中的用户之间的关系就会一直在变化，是一种非稳定的状态。<br>读写比例100:1：读写严重不平衡，读多写少，一般读写比例在10：1，甚至100：1以上。</li><li><code>消息必达性要求高</code>：比如发送了一条朋友圈后，结果部分朋友看到了，部分朋友没看到，如果偏偏女朋友没看到，那么可能会产生很严重的感情矛盾，后果很严重。</li></ul><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><ul><li><p><code>Timeline</code>：按发布的时间顺序排序，先发布的先看到，后发布的排列在最顶端，类似于微信朋友圈，微博等。这也是一种最常见的形式。产品如果选择Timeline类型，那么就是认为Feed流中的Feed不多，但是每个Feed都很重要，都需要用户看到。</p></li><li><p><code>Rank</code>：按某个非时间的因子排序，一般是按照用户的喜好度排序，用户最喜欢的排在最前面，次喜欢的排在后面。这种一般假定用户可能看到的Feed非常多，而用户花费在这里的时间有限，那么就为用户选择出用户最想看的Top N结果，场景的应用场景有图片分享、新闻推荐类、商品推荐等。</p></li></ul><h6 id="Feed流的主要模式"><a href="#Feed流的主要模式" class="headerlink" title="Feed流的主要模式"></a>Feed流的主要模式</h6><ul><li>推（Push）</li></ul><p><img src="Feed%E6%A8%A1%E5%BC%8F_%E6%8E%A8.png" alt></p><ul><li>拉（Pull）</li></ul><p><img src="Feed%E6%A8%A1%E5%BC%8F_%E6%8E%A8%E6%8B%89.png" alt></p><ul><li>推拉结合（Hybrid）</li></ul><p><img src="Feed%E6%A8%A1%E5%BC%8F_%E6%8E%A8%E6%8B%89.png" alt></p><h2 id="关于服务端与App之间的消息推送"><a href="#关于服务端与App之间的消息推送" class="headerlink" title="关于服务端与App之间的消息推送"></a>关于服务端与App之间的消息推送</h2><h6 id="推送系统"><a href="#推送系统" class="headerlink" title="推送系统"></a>推送系统</h6><blockquote><p>通过接入极光推送实现业务上需要服务端主动推送通知动作在App及做出对应的逻辑流程</p></blockquote><p><img src="%E6%8E%A8%E9%80%81.png" alt></p><h2 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h2><h6 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h6><p>使用 <code>Spring MVC</code> 作为web请求层</p><blockquote><p>Spring MVC框架是有一个MVC框架，通过实现Model-View-Controller模式来很好地将数据、业务与展现进行分离。从这样一个角度来说，Spring MVC和Struts、Struts2非常类似。Spring MVC的设计是围绕DispatcherServlet展开的，DispatcherServlet负责将请求派发到特定的handler。通过可配置的handler mappings、view resolution、locale以及theme resolution来处理请求并且转到对应的视图。Spring MVC请求处理的整体流程如图</p></blockquote><p><img src="SpringMvc_%E6%B5%81%E7%A8%8B.png" alt></p><p>使用 <code>Spring Boot</code> 作为脚手架的方法进行开发</p><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p></blockquote><p>优点</p><ul><li>使编码变得简单<blockquote><p>spring boot采用java config的方式，对spring进行配置，并且提供了大量的注解，极大地提高了工作效率。</p></blockquote></li><li>使配置变得简单<br><img src="Springboot_config.png" alt></li><li>使部署变得简单<blockquote><p>spring boot内置了三种servlet容器：tomcat，jetty，undertow。</p></blockquote></li><li>使监控变得简单<blockquote><p>spring boot提供了actuator包，可以使用它来对你的应用进行监控。它主要提供了以下功能：</p></blockquote></li></ul><h6 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h6><p>使用<code>MyBatis</code> + <code>Redis</code> + <code>Spring jpa</code> 作为数据访问层</p><blockquote><p>MyBatis 是一款持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p></blockquote><p>通过本人的开源项目 <a href="https://gitee.com/rplees/Mapper" target="_blank" rel="noopener">Mapper</a> 实现了更灵活的,无需重复的代码量的SQL查询与公用方法的封装</p><blockquote><p>Spring Data JPA是Spring基于Hibernate开发的一个JPA框架。如果用过Hibernate或者MyBatis的话，就会知道对象关系映射（ORM）框架有多么方便。但是Spring Data JPA框架功能更进一步，为我们做了 一个数据持久层框架几乎能做的任何事情。下面来逐步介绍它的强大功能。</p></blockquote><h6 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h6><p>使用 <code>Freemarker</code> 作用页面的渲染, App与服务端通讯则是用<code>JSON</code>协议通信</p><h2 id="使用SpringCloud微服务框架进行项目开发"><a href="#使用SpringCloud微服务框架进行项目开发" class="headerlink" title="使用SpringCloud微服务框架进行项目开发"></a>使用<code>SpringCloud</code>微服务框架进行项目开发</h2><blockquote><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署</p></blockquote><h6 id="核心成员"><a href="#核心成员" class="headerlink" title="核心成员"></a>核心成员</h6><ul><li><code>Spring Cloud Netflix</code></li><li><code>Netflix Eureka</code><blockquote><p>服务中心，云端服务发现</p></blockquote></li><li><code>Netflix Hystrix</code><blockquote><p>熔断器，容错管理工具</p></blockquote></li><li><code>Netflix Zuul</code><blockquote><p>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门</p></blockquote></li><li><code>Netflix Archaius</code><blockquote><p>配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能</p></blockquote></li><li><code>Spring Cloud Config</code><blockquote><p>集中化管理集群配置</p></blockquote></li><li><code>Spring Cloud Bus</code><blockquote><p>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。相当于水浒传中日行八百里的神行太保戴宗，确保各个小弟之间消息保持畅通。</p></blockquote></li><li><code>Spring Cloud Cluster</code><blockquote><p>Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</p></blockquote></li><li><code>Spring Cloud Consul</code><blockquote><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.<br>Spring Cloud Consul 封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p></blockquote></li><li><code>Spring Cloud Security</code><blockquote><p>基于spring security的安全工具包，为你的应用程序添加安全控制。这个小弟很牛鼻专门负责整个帮派的安全问题，设置不同的门派访问特定的资源，不能把秘籍葵花宝典泄漏了。</p></blockquote></li><li><code>Spring Cloud Sleuth</code><blockquote><p>日志收集工具包</p></blockquote></li><li><code>Spring Cloud Stream</code><blockquote><p>创建消息驱动微服务应用的框架, 数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p></blockquote></li><li><code>Spring Cloud Task</code><blockquote><p>主要解决短命微服务的任务管理，任务调度的工作，比如说某些定时任务晚上就跑一次，或者某项数据分析临时就跑几次。</p></blockquote></li><li><code>Spring Cloud Starters</code><blockquote><p>Spring Boot式的启动项目，为Spring Cloud提供开箱即用的依赖管理。</p></blockquote></li><li><code>Spring Cloud Zipkin</code><br>分布式链路调用监控系统</li></ul><h6 id="和-Spring-Boot-是什么关系"><a href="#和-Spring-Boot-是什么关系" class="headerlink" title="和 Spring Boot 是什么关系"></a>和 <code>Spring Boot</code> 是什么关系</h6><blockquote><p><code>spring</code> -&gt; <code>spring booot</code> &gt; <code>Spring Cloud</code></p></blockquote><p>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务，Spring Cloud是一个基于Spring Boot实现的云应用开发工具；Spring Boot专注于快速、方便集成的单个个体，Spring Cloud是关注全局的服务治理框架；Spring Boot使用了默认大于配置的理念</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h6 id="聚哪乐App项目结构"><a href="#聚哪乐App项目结构" class="headerlink" title="聚哪乐App项目结构"></a><code>聚哪乐App项目结构</code></h6><p><img src="YZ_%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt></p><ul><li><code>yz-core</code> 核心业务层逻辑封装</li><li><code>yz-admin</code> 后台管理系统</li><li><code>yz-ipad</code> 商户版接口</li><li><code>yz-job</code> 任务调度模块,提供一些需要处理超时处理等的任务调度</li><li><code>yz-place-admin</code> 商户端后台管理</li><li><code>yz-rest</code> App接口</li></ul><h6 id="Erp项目结构"><a href="#Erp项目结构" class="headerlink" title="Erp项目结构"></a><code>Erp项目结构</code></h6><p><img src="YZ_ERP_%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt></p><ul><li><code>erp</code> Erp接口,事务</li><li><code>erp-pushnotice</code> Erp与场所端的socket协议通讯推送</li><li><code>gateway</code> SpringCloud网关层</li><li><code>registry</code> SpringCloud注册中心</li><li><code>yzconfig</code> SpringCloud分布式配置中心</li><li><code>zipkin</code> SpringCloud分布式链路调用监控系统</li></ul><h6 id="商户端流程图"><a href="#商户端流程图" class="headerlink" title="商户端流程图"></a><code>商户端流程图</code></h6><p><img src="%E5%95%86%E6%88%B7%E7%AB%AF%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><h6 id="商户端流程图点击下载"><a href="#商户端流程图点击下载" class="headerlink" title="商户端流程图点击下载"></a><code>商户端流程图</code><a href="聚哪乐流程-1229.pptx">点击下载</a></h6><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><table><thead><tr><th>功能</th><th align="center">软件</th></tr></thead><tbody><tr><td>代码开发</td><td align="center"><code>eclipse</code></td></tr><tr><td>JDK版本</td><td align="center"><code>jdk1.7</code>, <code>jdk1.8</code></td></tr><tr><td>缓存管理</td><td align="center"><code>Redis</code>客户端</td></tr><tr><td>发布打包</td><td align="center"><code>maven</code></td></tr><tr><td>新增集群实例</td><td align="center">参考本人开源项目 <a href="https://gitee.com/rplees/tomcat-shell" target="_blank" rel="noopener">linux tomcat单机多实例部署shell</a></td></tr><tr><td>发布</td><td align="center"><code>secureCRT</code>, <code>SSH</code>, <code>SHELL</code>脚本</td></tr><tr><td>微信公众号调试</td><td align="center"><code>微信web开发者工具</code></td></tr><tr><td>数据库客户端</td><td align="center"><code>Sequel Pro</code>, <code>Dbvisualizer</code>, <code>Navicat</code></td></tr><tr><td>部署容器</td><td align="center"><code>Docker</code></td></tr><tr><td>## 使用到的开源</td><td align="center"></td></tr></tbody></table><table><thead><tr><th>功能</th><th align="center">软件</th></tr></thead><tbody><tr><td>项目管理</td><td align="center"><code>BugFree</code></td></tr><tr><td>项目接口文档</td><td align="center"><code>Swagger2</code>, <code>RAP</code></td></tr><tr><td>代码管理软件</td><td align="center"><code>Git</code></td></tr><tr><td>服务器系统</td><td align="center">阿里云(<code>ECS</code>)</td></tr><tr><td>数据库</td><td align="center"><code>(RDS) MYSQL</code></td></tr><tr><td>HTTP／HTTPS服务器</td><td align="center"><code>Nginx</code>、<code>Tomcat</code>、<code>Apache</code></td></tr><tr><td>负载均衡</td><td align="center"><code>Nginx</code>、阿里云<code>SLB</code></td></tr><tr><td>消息队列</td><td align="center"><code>RabbitMQ</code></td></tr><tr><td>推送</td><td align="center"><code>JPush</code></td></tr><tr><td>即时聊天</td><td align="center">`融云``</td></tr><tr><td>直播视频</td><td align="center"><code>网易视频</code></td></tr><tr><td>搜索</td><td align="center"><code>lucene</code></td></tr><tr><td>图片处理</td><td align="center"><code>OSS</code>图片处理</td></tr><tr><td>监控</td><td align="center">阿里云<code>druid</code></td></tr><tr><td>缓存</td><td align="center"><code>Redis</code>集群</td></tr><tr><td>短信发送</td><td align="center"><code>蓝创</code></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h6 id="服务器运行状况"><a href="#服务器运行状况" class="headerlink" title="服务器运行状况"></a>服务器运行状况</h6><blockquote><p>自发布上线以来,生产环境的4台服务器集群均没有出现过宕机情况,有次线上事故为用户加载很慢,分析原因是数据库的连接数过少,被集群服务器的连接池用完了,解决方法:增加RDS的连接数</p></blockquote><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E7%8A%B6%E5%86%B5.png" alt></p><h6 id="阿里-服务监控"><a href="#阿里-服务监控" class="headerlink" title="阿里-服务监控"></a>阿里-服务监控</h6><blockquote></blockquote><p><img src="%E9%98%BF%E9%87%8C-ESC%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7.png" alt></p><h6 id="Docker运行状况"><a href="#Docker运行状况" class="headerlink" title="Docker运行状况"></a>Docker运行状况</h6><blockquote><p>目前使用Docker部署的有 <code>ELK</code> 分布式日志, <code>erp</code>系统接口,<code>erp-pushnotice</code></p></blockquote><p><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5Docker.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;后台技术架构文档-&lt;code&gt;精洲华娱&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文档归公司内部使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;开发模式-小步快走，快速迭代&quot;&gt;&lt;a href=&quot;#开发模式-小步快走，快速迭代&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://rplees.com/tags/JAVA/"/>
    
      <category term="后台" scheme="http://rplees.com/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="架构" scheme="http://rplees.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>前端开发面试题</title>
    <link href="http://rplees.com/2018/04/19/HTML%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://rplees.com/2018/04/19/HTML面试题/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2019-07-16T08:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发面试题"><a href="#前端开发面试题" class="headerlink" title="前端开发面试题"></a>前端开发面试题</h1><p><strong>前端开发知识点：</strong></p><pre><code>HTML&amp;CSS：    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、    HTML5、CSS3、FlexboxJavaScript：    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、    DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs其他：    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力</code></pre><p>作为一名前端工程师，<strong>无论工作年头长短都应该掌握的知识点</strong>：</p><p>此条由 王子墨 发表在 <a href="http://lab.yuanwai.wang/" target="_blank" rel="noopener">攻城师的实验室</a></p><pre><code>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。10、JSON —— 作用、用途、设计结构。</code></pre><h3 id="更新时间-2016-3-25"><a href="#更新时间-2016-3-25" class="headerlink" title="更新时间:  2016-3-25"></a>更新时间:  2016-3-25</h3><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><a name="html">HTML</a></h2><ul><li><p>Doctype作用？标准模式与兼容模式各有什么区别?</p><pre><code>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</code></pre></li><li><p>HTML5 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;</code>？</p><pre><code>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</code></pre></li><li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p><pre><code>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。（1）行内元素有：a b span img input select strong（强调的语气）（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p（3）常见的空元素：    &lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;    鲜为人知的是：    &lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</code></pre></li></ul><ul><li>页面导入样式时，使用link和@import有什么区别？</li></ul><pre><code>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</code></pre><ul><li><p>介绍一下你对浏览器内核的理解？</p><pre><code>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。JS引擎则：解析和执行javascript来实现网页的动态效果。最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</code></pre></li><li><p>常见的浏览器内核有哪些？</p><pre><code>  Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]详细文章：[浏览器内核的解析和对比](http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html)</code></pre></li></ul><ul><li><p>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和<br>HTML5？</p><pre><code>* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。      绘画 canvas;      用于媒介回放的 video 和 audio 元素;      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;      sessionStorage 的数据在浏览器关闭后自动删除;      语意化更好的内容元素，比如 article、footer、header、nav、section;      表单控件，calendar、date、time、email、url、search;      新的技术webworker, websocket, Geolocation;  移除的元素：      纯表现的元素：basefont，big，center，font, s，strike，tt，u;      对可用性产生负面影响的元素：frame，frameset，noframes；* 支持HTML5新标签：     IE8/IE7/IE6支持通过document.createElement方法产生的标签，       可以利用这一特性让这些浏览器支持HTML5新标签，       浏览器支持新标签后，还需要添加标签默认的样式。     当然也可以直接使用成熟的框架、比如html5shim;* 如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素</code></pre></li></ul><ul><li><p>简述一下你对HTML语义化的理解？</p><pre><code>用正确的标签做正确的事情。html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</code></pre></li><li><p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p><pre><code>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。存储大小：    cookie数据大小不能超过4k。    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。有期时间：    localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；    sessionStorage  数据在当前浏览器窗口关闭后自动删除。    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</code></pre></li><li><p>iframe有那些缺点？</p><pre><code>*iframe会阻塞主页面的Onload事件；*搜索引擎的检索程序无法解读这种页面，不利于SEO;*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</code></pre></li><li><p>Label的作用是什么？是怎么用的？</p><pre><code>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;&lt;input type=“text“name=&quot;Name&quot; id=&quot;Name&quot;/&gt;&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;</code></pre></li><li><p>HTML5的form如何关闭自动完成功能？</p><pre><code>给不想要提示的 form 或某个 input 设置为 autocomplete=off。</code></pre></li></ul><ul><li><p>如何实现浏览器内多个标签页之间的通信? (阿里)</p><pre><code>WebSocket、SharedWorker；也可以调用localstorge、cookies等本地存储方式；localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信；注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</code></pre></li><li><p>webSocket如何兼容低浏览器？(阿里)</p><pre><code>Adobe Flash Socket 、ActiveX HTMLFile (IE) 、基于 multipart 编码发送 XHR 、基于长轮询的 XHR</code></pre></li><li><p>页面可见性（Page Visibility API） 可以有哪些用途？</p><pre><code>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</code></pre></li><li><p>网页验证码是干嘛的，是为了解决什么安全问题。</p><pre><code>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。</code></pre></li><li><p>title与h1的区别、b与strong的区别、i与em的区别？</p><pre><code>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容。i内容展示为斜体，em表示强调的文本；Physical Style Elements -- 自然样式标签b, i, u, s, preSemantic Style Elements -- 语义样式标签strong, em, ins, del, code应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。</code></pre></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a name="css">CSS</a></h2><ul><li><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p><pre><code>（1）有两种， IE 盒子模型、W3C 盒子模型；（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；（3）区  别： IE的content部分把 border 和 padding计算了进去;</code></pre></li></ul><ul><li><p>CSS优先级算法如何计算？</p><pre><code>*   优先级就近原则，同权重情况下样式定义最近者为准;*   载入样式以最后载入的定位为准;优先级为:    同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。    !important &gt;  id &gt; class &gt; tag    important 比 内联优先级高</code></pre></li><li><p>如何居中div？</p></li></ul><pre><code>*  水平居中：给div设置一个宽度，然后添加margin:0 auto属性        div{            width:200px;            margin:0 auto;         }*  让绝对定位的div居中        div {            position: absolute;            width: 300px;            height: 300px;            margin: auto;            top: 0;            left: 0;            bottom: 0;            right: 0;            background-color: pink;    /* 方便看效果 */        }*  水平垂直居中一        确定容器的宽高 宽500 高 300 的层        设置层的外边距        div {            position: relative;        /* 相对定位或绝对定位均可 */            width:500px;            height:300px;            top: 50%;            left: 50%;            margin: -150px 0 0 -250px;         /* 外边距为自身宽高的一半 */            background-color: pink;         /* 方便看效果 */         }*  水平垂直居中二        未知容器的宽高，利用 `transform` 属性        div {            position: absolute;        /* 相对定位或绝对定位均可 */            width:500px;            height:300px;            top: 50%;            left: 50%;            transform: translate(-50%, -50%);            background-color: pink;         /* 方便看效果 */        }*  水平垂直居中三        利用 flex 布局        实际使用时应考虑兼容性        .container {            display: flex;            align-items: center;         /* 垂直居中 */            justify-content: center;    /* 水平居中 */        }        .container div {            width: 100px;            height: 100px;            background-color: pink;        /* 方便看效果 */        }  </code></pre><ul><li><p>display有哪些值？说明他们的作用。</p><pre><code>block           块类型。默认宽度为父元素宽度，可设置宽高，换行显示。none            缺省值。象行内元素类型一样显示。inline          行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。list-item       象块类型元素一样显示，并添加样式列表标记。table           此元素会作为块级表格来显示。inherit         规定应该从父元素继承 display 属性的值。</code></pre></li></ul><ul><li><p>position的值relative和absolute定位原点是？</p><pre><code>absolute  生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。fixed （老IE不支持）  生成绝对定位的元素，相对于浏览器窗口进行定位。relative  生成相对定位的元素，相对于其正常位置进行定位。static  默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。inherit  规定从父元素继承 position 属性的值。</code></pre></li><li><p>CSS3有哪些新特性？</p><pre><code>新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）  圆角            （border-radius:8px）多列布局        （multi-column layout）阴影和反射    （Shadow\Reflect）文字特效        （text-shadow、）文字渲染        （Text-decoration）线性渐变        （gradient）旋转             （transform）缩放,定位,倾斜,动画,多背景例如:transform:\scale(0.85,0.90)\ translate(0px,-30px)\ skew(-9deg,0deg)\Animation:</code></pre></li><li><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p><pre><code>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。在布局上有了比以前更加灵活的空间。</code></pre></li><li><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么?</p></li><li><p>为什么要初始化CSS样式。</p><pre><code>- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</code></pre></li><li><p>css定义的权重</p><pre><code>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：/*权重为1*/div{}/*权重为10*/.class1{}/*权重为100*/#id1{}/*权重为100+1=101*/#id1 div{}/*权重为10+1=11*/.class1 div{}/*权重为10+10+1=21*/.class1 .class2 div{}如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现</code></pre></li></ul><ul><li><p>请解释一下为什么需要清除浮动？清除浮动的方式</p><p>  清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p></li><li><p>移动端的布局用过媒体查询吗？</p></li></ul><pre><code>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来，而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法&lt;!-- link元素中的CSS媒体查询 --&gt;当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。当媒体查询返回假， &lt;link&gt; 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。&lt;link rel=&quot;stylesheet&quot; media=&quot;(max-width: 800px)&quot; href=&quot;example.css&quot; /&gt;&lt;!-- 样式表中的CSS媒体查询 --&gt;包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。&lt;style&gt;    @media (min-width: 700px) and (orientation: landscape){      .sidebar {        display: none;      }    }&lt;/style&gt;</code></pre><ul><li><p>使用 CSS 预处理器吗？喜欢那个？</p><pre><code>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)</code></pre></li></ul><ul><li><p>CSS优化、提高性能的方法有哪些？</p><pre><code>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；</code></pre></li></ul><ul><li><p>浏览器是怎样解析CSS选择器的？</p><pre><code>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。</code></pre></li></ul><ul><li><p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p></li><li><p>margin和padding分别适合什么场景使用？</p><pre><code>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段</code></pre></li><li><p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p></li><li><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><a name="js">JavaScript</a></h2><ul><li><p>JavaScript原型，原型链 ? 有什么特点？</p><pre><code>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。关系：instance.constructor.prototype = instance.__proto__特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</code></pre></li><li><p>Javascript如何实现继承？</p><pre><code>1、构造继承2、原型继承3、实例继承4、拷贝继承原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。    function Parent(){        this.name = &apos;wang&apos;;    }    function Child(){        this.age = 28;    }    Child.prototype = new Parent();//继承了Parent，通过原型    var demo = new Child();    alert(demo.age);    alert(demo.name);//得到被继承的属性</code></pre></li><li><p>JavaScript继承的几种实现方式？</p><ul><li>参考：<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">构造函数的继承</a>，<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="noopener">非构造函数的继承</a>；</li></ul></li></ul><ul><li><p>javascript创建对象的几种方式？</p><pre><code>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</code></pre></li></ul><pre><code>1、对象字面量的方式    person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};2、用function来模拟无参的构造函数    function Person(){}    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class    person.name=&quot;Mark&quot;;    person.age=&quot;25&quot;;    person.work=function(){    alert(person.name+&quot; hello...&quot;);    }    person.work();3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）    function Pet(name,age,hobby){       this.name=name;//this作用域：当前对象       this.age=age;       this.hobby=hobby;       this.eat=function(){          alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);       }    }    var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象    maidou.eat();//调用eat方法4、用工厂方式来创建（内置对象）     var wcDog =new Object();     wcDog.name=&quot;旺财&quot;;     wcDog.age=3;     wcDog.work=function(){       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);     }     wcDog.work();5、用原型方式来创建    function Dog(){     }     Dog.prototype.name=&quot;旺财&quot;;     Dog.prototype.eat=function(){     alert(this.name+&quot;是个吃货&quot;);     }     var wangcai =new Dog();     wangcai.eat();5、用混合方式来创建    function Car(name,price){      this.name=name;      this.price=price;    }     Car.prototype.sell=function(){       alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);      }    var camry =new Car(&quot;凯美瑞&quot;,27);    camry.sell();</code></pre><ul><li><p>Javascript作用链域?</p><pre><code>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。</code></pre></li><li><p>谈谈This对象的理解。</p><ul><li>this总是指向函数的直接调用者（而非间接调用者）；</li><li>如果有new关键字，this指向new出来的那个对象；</li><li>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</li></ul></li><li><p>eval是做什么的？</p><pre><code>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</code></pre></li><li><p>什么是window对象? 什么是document对象?</p><pre><code>window对象是指浏览器打开的窗口。document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。</code></pre></li><li><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p><pre><code>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;提高编译器效率，增加运行速度；为未来新版本的Javascript标准化做铺垫。</code></pre></li></ul><ul><li><p>如何判断一个对象是否属于某个类？</p><pre><code>使用instanceof （待完善）if(a instanceof Person){    alert(&apos;yes&apos;);}</code></pre></li><li><p>new操作符具体干了什么呢?</p><pre><code>     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。   2、属性和方法被加入到 this 引用的对象中。      3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。var obj  = {};obj.__proto__ = Base.prototype;Base.call(obj);</code></pre></li></ul><ul><li>用原生JavaScript的实现过什么功能吗？</li></ul><ul><li><p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p><pre><code>hasOwnPropertyjavaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。使用方法：object.hasOwnProperty(proName)其中参数object是必选项。一个对象的实例。proName是必选项。一个属性名称的字符串值。如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</code></pre></li><li><p>JSON 的了解？</p><pre><code>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小如：{&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;}JSON字符串转换为JSON对象:var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);var obj = str.parseJSON();var obj = JSON.parse(str);JSON对象转换为JSON字符串：var last=obj.toJSONString();var last=JSON.stringify(obj);</code></pre></li><li><p><code>[].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code> 能解释一下这段代码的意思吗？</p></li></ul><ul><li><p>js延迟加载的方式有哪些？</p><pre><code>defer和async、动态创建DOM方式（用得最多）、按需异步载入js</code></pre></li></ul><ul><li><p>Ajax 是什么? 如何创建一个Ajax？</p><pre><code>ajax的全称：Asynchronous Javascript And XML。异步传输+js+xml。所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息(3)设置响应HTTP请求状态变化的函数(4)发送HTTP请求(5)获取异步调用返回的数据(6)使用JavaScript和DOM实现局部刷新</code></pre></li><li><p>Ajax 解决浏览器缓存问题？</p><pre><code>1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)。2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。3、在URL后面加上一个随机数： &quot;fresh=&quot; + Math.random();。4、在URL后面加上时间戳：&quot;nowtime=&quot; + new Date().getTime();。5、如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</code></pre></li><li><p>同步和异步的区别?</p><p> 同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p></li></ul><pre><code>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。（待完善）</code></pre><ul><li><p>你有用过哪些前端性能优化的方法？</p><pre><code>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。（4） 当需要设置的样式很多时设置className而不是直接操作style。（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</code></pre></li><li><p>http状态码有那些？分别代表是什么意思？</p><pre><code>  简单版  [      100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息      200  OK         正常返回信息      201  Created      请求成功并且服务器创建了新的资源      202  Accepted     服务器已接受请求，但尚未处理      301  Moved Permanently  请求的网页已永久移动到新位置。      302 Found          临时性重定向。      303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。      304  Not Modified 自从上次请求后，请求的网页未修改过。      400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。      401 Unauthorized 请求未授权。      403 Forbidden      禁止访问。      404 Not Found      找不到如何与 URI 相匹配的资源。      500 Internal Server Error  最常见的服务器端错误。      503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。  ]完整版1**(信息类)：表示接收到请求并且继续处理  100——客户必须继续发出请求  101——客户要求服务器根据请求转换HTTP协议版本2**(响应成功)：表示动作被成功接收、理解和接受  200——表明该请求被成功地完成，所请求的资源发送回客户端  201——提示知道新文件的URL  202——接受和处理、但处理未完成  203——返回信息不确定或不完整  204——请求收到，但返回信息为空  205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件  206——服务器已经完成了部分用户的GET请求3**(重定向类)：为了完成指定的动作，必须接受进一步处理  300——请求的资源可在多处得到  301——本网页被永久性转移到另一个URL  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。  303——建议客户访问其他URL或访问方式  304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用  305——请求的资源必须从服务器指定的地址得到  306——前一版本HTTP中使用的代码，现行版本中不再使用  307——申明请求的资源临时性删除4**(客户端错误类)：请求包含错误语法或不能正确执行  400——客户端请求有语法错误，不能被服务器所理解  401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用  HTTP 401.1 - 未授权：登录失败  　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败  　　HTTP 401.3 - ACL 禁止访问资源  　　HTTP 401.4 - 未授权：授权被筛选器拒绝  HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败  402——保留有效ChargeTo头响应  403——禁止访问，服务器收到请求，但是拒绝提供服务  HTTP 403.1 禁止访问：禁止可执行访问  　　HTTP 403.2 - 禁止访问：禁止读访问  　　HTTP 403.3 - 禁止访问：禁止写访问  　　HTTP 403.4 - 禁止访问：要求 SSL  　　HTTP 403.5 - 禁止访问：要求 SSL 128  　　HTTP 403.6 - 禁止访问：IP 地址被拒绝  　　HTTP 403.7 - 禁止访问：要求客户证书  　　HTTP 403.8 - 禁止访问：禁止站点访问  　　HTTP 403.9 - 禁止访问：连接的用户过多  　　HTTP 403.10 - 禁止访问：配置无效  　　HTTP 403.11 - 禁止访问：密码更改  　　HTTP 403.12 - 禁止访问：映射器拒绝访问  　　HTTP 403.13 - 禁止访问：客户证书已被吊销  　　HTTP 403.15 - 禁止访问：客户访问许可过多  　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效  HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效  404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL  405——用户在Request-Line字段定义的方法不允许  406——根据用户发送的Accept拖，请求资源不可访问  407——类似401，用户必须首先在代理服务器上得到授权  408——客户端没有在用户指定的饿时间内完成请求  409——对当前资源状态，请求不能完成  410——服务器上不再有此资源且无进一步的参考地址  411——服务器拒绝用户定义的Content-Length属性请求  412——一个或多个请求头字段在当前请求中错误  413——请求的资源大于服务器允许的大小  414——请求的资源URL长于服务器允许的长度  415——请求资源不支持请求项目格式  416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段  417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。5**(服务端错误类)：服务器不能正确执行一个正确的请求  HTTP 500 - 服务器遇到错误，无法完成请求  　　HTTP 500.100 - 内部服务器错误 - ASP 错误  　　HTTP 500-11 服务器关闭  　　HTTP 500-12 应用程序重新启动  　　HTTP 500-13 - 服务器太忙  　　HTTP 500-14 - 应用程序无效  　　HTTP 500-15 - 不允许请求 global.asa  　　Error 501 - 未实现HTTP 502 - 网关错误HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</code></pre></li><li><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p><pre><code>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；详细版：  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;  3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;  4、进行HTTP协议会话，客户端发送报头(请求报头);  5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;  8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;  9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;  10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。简洁版：  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；  载入解析到的资源文件，渲染页面，完成。</code></pre></li><li><p>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p></li><li><p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p></li><li><p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p></li><li><p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p><pre><code>Sublime Text 3 + 相关插件编写前端代码Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能Node.js+Gulpgit 用于版本控制和Code Review</code></pre></li><li><p>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p><pre><code>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。1、实现界面交互2、提升用户体验3、有了Node.js，前端可以实现服务端的一些事情</code></pre></li></ul><pre><code>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，参与项目，快速高质量完成实现效果图，精确到1px；与团队成员，UI设计，产品经理的沟通；做好的页面结构，页面重构和用户体验；处理hack，兼容、写出优美的代码格式；针对服务器的优化、拥抱最新前端技术。</code></pre><ul><li><p>你怎么看待Web App 、hybrid App、Native App？</p></li><li><p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p></li><li><p>你对加班的看法？</p></li></ul><pre><code>加班就像借钱，原则应当是------救急不救穷</code></pre><ul><li><p>平时如何管理你的项目？</p><pre><code>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；页面进行标注（例如 页面 模块 开始和结束）；CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；JS 分文件夹存放 命名以该JS功能为准的英文翻译。图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理</code></pre></li><li><p>如何设计突发大规模并发架构？</p></li></ul><ul><li><p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p></li><li><p>说说最近最流行的一些东西吧？常去哪些网站？</p><pre><code>ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化</code></pre></li><li><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p></li></ul><ul><li><p>移动端（Android IOS）怎么做好用户体验?</p><pre><code>清晰的视觉纵线、信息的分组、极致的减法、利用选择代替输入、标签及文字的排布方式、依靠明文确认密码、合理的键盘利用、</code></pre></li><li><p>简单描述一下你做过的移动APP项目研发流程？</p></li><li><p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p></li><li><p>你认为怎样才是全端工程师（Full Stack developer）？</p></li><li><p>介绍一个你最得意的作品吧？</p></li><li><p>你有自己的技术博客吗，用了哪些技术？</p></li><li><p>对前端安全有什么看法？</p></li><li><p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p></li><li><p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p></li><li><p>最近在学什么东西？</p></li><li><p>你的优点是什么？缺点是什么？</p></li><li><p>如何管理前端团队?</p></li><li><p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p></li></ul><h2 id="前端学习网站推荐"><a href="#前端学习网站推荐" class="headerlink" title="前端学习网站推荐"></a><a name="web">前端学习网站推荐</a></h2><pre><code>1. 极客标签：     http://www.gbtags.com/2. 码农周刊：     http://weekly.manong.io/issues/3. 前端周刊：     http://www.feweekly.com/issues4. 慕课网：       http://www.imooc.com/5. div.io：         http://div.io6. Hacker News： https://news.ycombinator.com/news7. InfoQ：       http://www.infoq.com/8. w3cplus：     http://www.w3cplus.com/9. Stack Overflow： http://stackoverflow.com/10.w3school：    http://www.w3school.com.cn/11.mozilla：     https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</code></pre><h2 id="文档推荐"><a href="#文档推荐" class="headerlink" title="文档推荐"></a><a name="web">文档推荐</a></h2><ol><li><p><a href="http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html" title="jQuery 基本原理" target="_blank" rel="noopener">jQuery 基本原理</a></p></li><li><p><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></p></li><li><p><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册</a></p></li><li><p><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程</a></p></li><li><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6入门</a></p></li></ol><p><strong>备注：</strong></p><pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。资料答案不够正确和全面，欢迎欢迎Star和提交issues。格式不断修改更新中。在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒会给你造成不必要的信息干扰。当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull request、被发起了issue等情况你都会收到邮件通知。star相当于是点赞或收藏，方便以后查找。fork表示你想要补充完善这个项目的内容。更新记录：    2016年10月20日:更新一些已被发现的问题。    2016年3月25日：新增ECMAScript6 相关问题</code></pre><h3 id="更新时间-2016年10月20日"><a href="#更新时间-2016年10月20日" class="headerlink" title="更新时间:  2016年10月20日"></a>更新时间:  2016年10月20日</h3><pre><code>爱机车、爱骑行、爱旅行、爱摄影、爱阅读的前端开发攻城师。我的微博：http://weibo.com/920802999</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端开发面试题&quot;&gt;&lt;a href=&quot;#前端开发面试题&quot; class=&quot;headerlink&quot; title=&quot;前端开发面试题&quot;&gt;&lt;/a&gt;前端开发面试题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;前端开发知识点：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HTML&amp;amp;
      
    
    </summary>
    
    
      <category term="面试" scheme="http://rplees.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="HTML" scheme="http://rplees.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>SS服务端搭建</title>
    <link href="http://rplees.com/2017/03/18/ss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://rplees.com/2017/03/18/ss服务器搭建/</id>
    <published>2017-03-18T07:25:58.000Z</published>
    <updated>2019-07-16T08:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SS服务端搭建"><a href="#SS服务端搭建" class="headerlink" title="SS服务端搭建"></a>SS服务端搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line">yum install m2crypto</span><br><span class="line">vim /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑shadowsocks.json的内容主要是IP与密码</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"本机外网IP"</span>,</span><br><span class="line">      <span class="string">"server_port"</span>:8388,</span><br><span class="line">      <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"local_port"</span>:1080,</span><br><span class="line">      <span class="string">"password"</span>:<span class="string">"密码"</span>,</span><br><span class="line">      <span class="string">"timeout"</span>:600,</span><br><span class="line">      <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">      <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"><span class="comment">#或者使用nohup启动</span></span><br><span class="line">nohup /usr/bin/ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SS服务端搭建&quot;&gt;&lt;a href=&quot;#SS服务端搭建&quot; class=&quot;headerlink&quot; title=&quot;SS服务端搭建&quot;&gt;&lt;/a&gt;SS服务端搭建&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://rplees.com/tags/linux/"/>
    
      <category term="搭建" scheme="http://rplees.com/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="ss" scheme="http://rplees.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>搭建</title>
    <link href="http://rplees.com/2017/03/18/%E6%90%AD%E5%BB%BA/"/>
    <id>http://rplees.com/2017/03/18/搭建/</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2019-07-18T14:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搭建离不开以下提供的资料"><a href="#搭建离不开以下提供的资料" class="headerlink" title="搭建离不开以下提供的资料"></a>搭建离不开以下提供的资料</h4><p>Inline code are surround by <code>backtick</code> key. To create a block code:</p><pre><code>):[http://wingjay.com/2015/12/07/如何在一天之内搭建以你自己名字为域名的很cool的个人博客/](http://wingjay.com/2015/12/07/如何在一天之内搭建以你自己名字为域名的很cool的个人博客/)):[http://dpc11.cn/2016/01/05/个人博客搭建/](http://dpc11.cn/2016/01/05/个人博客搭建/)</code></pre><h4 id><a href="#" class="headerlink" title=" "></a> </h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;搭建离不开以下提供的资料&quot;&gt;&lt;a href=&quot;#搭建离不开以下提供的资料&quot; class=&quot;headerlink&quot; title=&quot;搭建离不开以下提供的资料&quot;&gt;&lt;/a&gt;搭建离不开以下提供的资料&lt;/h4&gt;&lt;p&gt;Inline code are surround by &lt;c
      
    
    </summary>
    
    
      <category term="搭建" scheme="http://rplees.com/tags/%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative技术分享</title>
    <link href="http://rplees.com/2016/10/28/react-native%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    <id>http://rplees.com/2016/10/28/react-native技术分享/</id>
    <published>2016-10-28T01:20:58.000Z</published>
    <updated>2019-07-16T07:59:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native介绍"><a href="#React-Native介绍" class="headerlink" title="React-Native介绍"></a>React-Native介绍</h1><blockquote><p>LEARN ONCE, WRITE ANYWHERE: BUILD MOBILE APPS WITH REACT</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><ul><li>复用了 React 的思想，有利于前端开发者涉足移动端。</li><li>能够利用 JavaScript 动态更新的特性，快速迭代。</li><li>相比于原生平台，开发速度更快，相比于 Hybrid 框架，性能更好。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><ul><li>做不到 <code>Write once, Run everywhere</code>，也就是说开发者依然需要为 iOS 和 Android 平台提供两套不同的代码，比如参考官方文档可以发现不少组件和API都区分了 <code>Android</code> 和 <code>iOS</code> 版本。即使是共用组件，也会有平台独享的函数。</li><li>不能做到完全屏蔽 <code>iOS</code> 端或 <code>Android</code> 的细节，前端开发者必须对原生平台有所了解。加重了学习成本。对于移动端开发者来说，完全不具备用 <code>React Native</code> 开发的能力。</li><li>由于 <code>Objective-C</code> 与 <code>JavaScript</code> 之间切换存在固定的时间开销，所以性能必定不及原生。</li></ul><p>综上，我对 React Native 的定位是：</p><blockquote><p>利用脚本语言进行原生平台开发的一次成功尝试，降低了前端开发者入门移动端的门槛，一定业务场景下具有独特的优势，几乎不可能取代原生平台开发。</p></blockquote><p><a href="http://reactnative.cn/docs/0.35/getting-started.html" target="_blank" rel="noopener">环境搭建(官方)</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1171077-75412d65af198cf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图解"></p><p>其次，<code>React Native</code> 能够运行起来，全靠 <code>Objective-C</code> 和 <code>JavaScript</code> 的交互。对于没有接触过 <code>JavaScript</code> 的人来说，非常有必要理解 <code>JavaScript</code> 代码如何被执行。</p><p>我们知道 <code>C</code> 系列的语言，经过编译，链接等操作后，会得到一个二进制格式的可执行文，所谓的运行程序，其实是运行这个二进制程序。</p><p>而 <code>JavaScript</code> 是一种脚本语言，它不会经过编译、链接等操作，而是在运行时才动态的进行词法、语法分析，生成抽象语法树(AST)和字节码，然后由解释器负责执行或者使用 JIT 将字节码转化为机器码再执行。整个流程由 <code>JavaScript</code> 引擎负责完成。</p><p>苹果提供了一个叫做 <code>JavaScript Core</code> 的框架，这是一个 <code>JavaScript</code> 引擎。通过下面这段代码可以简单的感受一下 Objective-C 如何调用 JavaScript 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">JSValue *jsVal = [context evaluateScript:@&quot;21+7&quot;];</span><br><span class="line">int iVal = [jsVal toInt32];</span><br></pre></td></tr></table></figure><h1 id="项目基本文件介绍"><a href="#项目基本文件介绍" class="headerlink" title="项目基本文件介绍"></a>项目基本文件介绍</h1><blockquote><h5 id="创建第一个项目并运行"><a href="#创建第一个项目并运行" class="headerlink" title="创建第一个项目并运行"></a>创建第一个项目并运行</h5></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init FirstReactNative --verbose(能看到详细信息和进度，就是npm的安装进度)</span><br></pre></td></tr></table></figure><ul><li><code>index.android.js</code> android 入口</li><li><code>index.ios.js</code> ios 入口</li><li><code>package.json</code> 项目的描述配置文件(依赖,指令等,这是nodejs的部分) <a href="https://github.com/rplees/double-bull-probability/" target="_blank" rel="noopener">double-bull-probability</a></li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote><p>摘自<code>ReactNative</code></p></blockquote><p>官方项目支持的组件,官方例子(UIExplorer)详细介绍组件,API的作用与使用,如果想自定义组件可以自己写也可以到github等去找别人写好的组件,比如 <a href="https://github.com/FaridSafi/react-native-gifted-listview" target="_blank" rel="noopener">react-native-gifted-listview</a> 下拉刷新列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> ActivityIndicatorIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ActivityIndicatorIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ART() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ReactNativeART'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> DatePickerIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'DatePickerIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> DrawerLayoutAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'DrawerLayoutAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Image() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Image'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ImageEditor() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ImageEditor'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ImageStore() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ImageStore'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ListView() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ListView'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> MapView() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'MapView'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Modal() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Modal'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Navigator() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Navigator'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> NavigatorIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'NavigatorIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Picker() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Picker'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> PickerIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'PickerIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ProgressBarAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ProgressBarAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ProgressViewIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ProgressViewIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ScrollView() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ScrollView'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> SegmentedControlIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'SegmentedControlIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> SliderIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'SliderIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> SnapshotViewIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'SnapshotViewIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Switch() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Switch'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> PullToRefreshViewAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'PullToRefreshViewAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> RecyclerViewBackedScrollView() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'RecyclerViewBackedScrollView'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> RefreshControl() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'RefreshControl'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> StatusBar() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'StatusBar'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> SwitchAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'SwitchAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> SwitchIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'SwitchIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TabBarIOS() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TabBarIOS'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Text() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Text'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TextInput() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TextInput'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ToastAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ToastAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ToolbarAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ToolbarAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> Touchable() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'Touchable'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TouchableHighlight() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TouchableHighlight'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TouchableNativeFeedback() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TouchableNativeFeedback'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TouchableOpacity() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TouchableOpacity'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> TouchableWithoutFeedback() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'TouchableWithoutFeedback'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> View() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'View'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> ViewPagerAndroid() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'ViewPagerAndroid'</span>); &#125;,</span><br><span class="line">  <span class="keyword">get</span> WebView() &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'WebView'</span>); &#125;,</span><br></pre></td></tr></table></figure><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><blockquote><p>弹性盒(Flexbox)和样式<br>我们在React Native中使用flexbox规则来指定某个组件的子元素的布局。Flexbox可以在不同屏幕尺寸上提供一致的布局结构。<br>一般来说，使用flexDirection、alignItems和 justifyContent三个样式属性就已经能满足大多数布局需求。</p></blockquote><p><a href="http://reactnative.cn/docs/0.35/layout-with-flexbox.html#content" target="_blank" rel="noopener">使用Flexbox布局</a></p><h1 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h1><blockquote><p>想要创建一个iOS模块，只需要创建一个接口，实现RCTBridgeModule协议，然后把你想在Javascript中使用的任何方法用RCT_EXPORT_METHOD包装。最后，再用RCT_EXPORT_MODULE导出整个模块即可。</p></blockquote><p>以Xcode为例, 在Utils.h 定义俩个方法:</p><ul><li>clearCookies(callback)</li><li>appInfo(callback)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Utils.h&quot;</span><br><span class="line"></span><br><span class="line">static NSString * const kAppId = @&quot;1079873993&quot;;</span><br><span class="line"></span><br><span class="line">@implementation Utils</span><br><span class="line"></span><br><span class="line">@synthesize bridge = _bridge;</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE()</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(clearCookies:(RCTResponseSenderBlock)callback) &#123;</span><br><span class="line">  NSHTTPCookieStorage *cookieStore = [NSHTTPCookieStorage sharedHTTPCookieStorage];</span><br><span class="line">  for (NSHTTPCookie *cookie in [cookieStore cookies]) &#123;</span><br><span class="line">    [cookieStore deleteCookie:cookie];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callback(@[[NSNull null]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(appInfo:(RCTResponseSenderBlock)callback) &#123;</span><br><span class="line">  NSString *appVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;CFBundleShortVersionString&quot;];</span><br><span class="line"></span><br><span class="line">  callback(@[</span><br><span class="line">             @&#123;@&quot;appVersion&quot;: appVersion</span><br><span class="line">               &#125;</span><br><span class="line">             ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>JS中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  NativeModules: &#123;<span class="comment">//导入自定义的原生模块</span></span><br><span class="line">      Utils,</span><br><span class="line">  &#125;</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Uitls = &#123;</span><br><span class="line">  clearCookies(cb) &#123;</span><br><span class="line">    Utils.clearCookies(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  appInfo(cb) &#123;</span><br><span class="line">    Utils.appInfo(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">      cb &amp;&amp; cb(info);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Uitls;</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><blockquote><p>模拟器 <code>Command ⌘</code> + <code>D</code> 弹出菜单有js调试选项,打开一个chrome浏览器,在控制台可以看到执行的js及日志输出<br>调试模式下当js修改了,可以reload不需要再次编译</p></blockquote><p><img src="http://reactnative.cn/static/img/chrome_breakpoint.png" alt="debugging"></p><p>React Native lets you build your app faster. Instead of recompiling, you can reload your app instantly. With hot reloading, you can even run new code while retaining your application state. Give it a try - it’s a magical experience.</p><p><img src="https://media.giphy.com/media/13WZniThXy0hSE/giphy.gif" alt="reload"></p><h1 id="发布打包"><a href="#发布打包" class="headerlink" title="发布打包"></a>发布打包</h1><p>##iOS</p><blockquote><p>如果是用pod引入包的话,需要先编译<br>open the project in ios dir <code>cd ios</code><br><code>pod install</code></p></blockquote><h3 id="Release-mode"><a href="#Release-mode" class="headerlink" title="Release mode"></a>Release mode</h3><ol><li><p>edit xcode project <code>OSCGit</code>‘s scheme to <code>release</code> mode</p></li><li><p>bundle the JS resources, in project root dir (如果第一次运行没生存index.ios.jsbundle,再运行一次)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#将所有的js代码都打包到一个文件index.ios.jsbundle去</span></span><br><span class="line">react-native bundle --entry-file index.ios.js --bundle-output ./ios/bundle/index.ios.jsbundle --platform ios --assets-dest ./ios/bundle --dev <span class="literal">false</span> --sourcemap-output ./ios/bundle/source.map --verbose</span><br></pre></td></tr></table></figure></li><li><p>AppDelegate.m 注释 <code>jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</code> 取消 <code>jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</code>的注释,发布版本的index.ios.jsbundle都打包到项目里去了</p></li><li><p>xcode run!</p></li></ol><h3 id="Debug-mode"><a href="#Debug-mode" class="headerlink" title="Debug mode"></a>Debug mode</h3><p>Edit xcode project <code>OSCGit</code> edit scheme to <code>debug</code> mode</p><p>Xcode run!</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><h3 id="Device"><a href="#Device" class="headerlink" title="Device"></a>Device</h3><pre><code>- sh ./build_android.sh</code></pre><h3 id="Emulator"><a href="#Emulator" class="headerlink" title="Emulator"></a>Emulator</h3><pre><code>- Just run the project</code></pre><h3 id="Debug-mode-1"><a href="#Debug-mode-1" class="headerlink" title="Debug mode"></a>Debug mode</h3><pre><code>- react-native run-android</code></pre><h1 id="code-push热更新-可选"><a href="#code-push热更新-可选" class="headerlink" title="code-push热更新(可选)"></a>code-push热更新(可选)</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g code-push-cli --verbose</span><br><span class="line">code-push register (会弹出网页,按照步骤安装)</span><br><span class="line">code-push access-key ls</span><br><span class="line"></span><br><span class="line">code-push app add RN_OSCGit</span><br><span class="line">code-push deployment ls RN_OSCGit</span><br><span class="line">code-push release-react RN_OSCGit ios --entryFile ./ios/bundle/index.ios.jsbundle</span><br><span class="line"></span><br><span class="line"><span class="comment">#android</span></span><br><span class="line">code-push app add RN_OSCGit_android</span><br><span class="line">code-push deployment ls RN_OSCGit_android</span><br><span class="line">code-push release-react RN_OSCGit_android android</span><br></pre></td></tr></table></figure></code></pre><h3 id="Check-app-status"><a href="#Check-app-status" class="headerlink" title="Check app status"></a>Check app status</h3><pre><code>code-push deployment ls RN_OSCGitcode-push deployment ls RN_OSCGit_android</code></pre><h3 id="Publish-update"><a href="#Publish-update" class="headerlink" title="Publish update"></a>Publish update</h3><pre><code>code-push release-react RN_OSCGit ios --entryFile ./ios/bundle/index.ios.jsbundlecode-push release-react RN_OSCGit_android android</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-Native介绍&quot;&gt;&lt;a href=&quot;#React-Native介绍&quot; class=&quot;headerlink&quot; title=&quot;React-Native介绍&quot;&gt;&lt;/a&gt;React-Native介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;LEARN ONC
      
    
    </summary>
    
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="react-native" scheme="http://rplees.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>ReactJS技术分享</title>
    <link href="http://rplees.com/2016/10/17/reactjs%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    <id>http://rplees.com/2016/10/17/reactjs技术分享/</id>
    <published>2016-10-17T01:20:58.000Z</published>
    <updated>2019-07-16T07:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React的定义与原理"><a href="#React的定义与原理" class="headerlink" title="React的定义与原理"></a>React的定义与原理</h1><p>React是一个用于构建用户界面的JavaScript库，而不是一个MVC框架，但可以使用React作为MVC架构的View层轻易的在已有项目中使用。</p><blockquote><p>官方定义 A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES(一个用于构建用户界面的JavaScript库)</p></blockquote><h1 id="为什么用React"><a href="#为什么用React" class="headerlink" title="为什么用React"></a>为什么用React</h1><blockquote><p>高效DOM渲染</p></blockquote><p>以前没有ajax技术的时候，web页面从服务端整体render出html输出到浏览器端进行渲染，同样的，用户的一个改变页面的操作也会刷新整个页面来完成。直到有了ajax出现，实现页面局部刷新，带来的高效和分离让web开发者们惊叹不已。但随之而来的问题是，复杂的用户交互及展现需要通过大量的DOM操作来完成，这让页面的性能以及开发的效率又出现了新的瓶颈。</p><p>时至今日，谈到前端性能优化，减少DOM元素、减少reflow和repaint、编码过程中尽量减少DOM的查询等手段是大家耳熟能详的。而页面任何UI的变化都是通过整体刷新来完成的。幸运的是，React通过自己实现的DOM Diff算法，计算出虚拟页面当前版本和新版本之间的差异，最小化重绘，避免不必要的DOM操作，解决了这两个公认的前端性能瓶颈，实现高效DOM渲染。</p><ul><li>我们知道，频繁的操作DOM所带来的性能消耗是很大的，而React之所以快，是因为它不直接操作DOM，而是引进虚拟DOM的实现来解决这个问题</li><li>对于页面的更新，React通过自己实现的<a href="http://segmentfault.com/a/1190000000606216" target="_blank" rel="noopener">DOM Diff</a>算法来进行差异对比、差异更新，反映到页面上就是只重绘了更新的部分，从而提高渲染效率。</li></ul><p>对于React的性能方面</p><ul><li>React 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。</li><li>在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。</li><li>不要天真地以为 Virtual DOM 就是快，diff 不是免费的，Virtual DOM 真正的价值从来都不是性能，而是它<ul><li>1) 为函数式的 UI 编程方式打开了大门；</li><li>2) 可以渲染到 DOM 以外的其他场景，如backend、native。</li></ul></li></ul><blockquote><p>组件化</p></blockquote><p>在业务开发中，遇到公共的模板部分，我们不得不将模板和规定的数据格式耦合在一起来实现组件。而在React中，我们可以使用JSX语法来封装组件，将组件的结构、数据逻辑甚至样式都聚合在一起，更加简单、明了、直观的定义组件。</p><p>有了组件化的实现，我们可以很直观的将一个复杂的页面分割成若干个独立组件，再将这些独立组件组合完成一个复杂的页面。这样既减少了逻辑复杂度，又实现了代码的重用。</p><p>React认为一个组件应该具有如下的特征：</p><ul><li>可组合：一个组件可以和其他的组件一起使用或者可以直接嵌套在另一个组件内部，通过这样的组合方式，一个复杂的UI组件可以分拆成若干个简单的UI组件</li><li>可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景</li><li>可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护</li></ul><blockquote><p>单向数据流</p></blockquote><p>在React中，数据的流向是从父节点到子节点的单向流动，这样可以使组件简单并且容易把握，因为子节点是无状态的，只需要从父节点获取props渲染即可。这样带来的收益是，顶层组件的某个prop改变了，React就会向下递归遍历整棵组件树，重新渲染所有使用到了这个属性的组件。</p><p>单向数据流带来的几个重要的好处是：</p><ul><li>相比之前的资源重组实现的组件，单向数据流可以很好的完成组件间的数据通信，否则的话，我们需要写一个事件机制来处理这个事情。</li><li>大家可能会问，这所倡导的单向流动，那相对MVC或是MVVM框架的双向数据绑定简直是弱爆了。那么这里需要理解的是，这里的单向，是循环流动的单向，数据是持续更新的。双向数据绑定是优秀便捷的实现，这个需要用实现的成本和业务场景来考量二者了。</li><li>对于单向数据流目前已经有很好的类库实现了，如flux reflux redux等。</li><li>React组件被认为自己是一个有限状态机。与用户交互，改变自己的状态（state）。算法根据这些状态，render算法现计算出合适的数据集呈现给用户。这样做的好处是设计范式高度一致</li></ul><h1 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h1><blockquote><p>React是数据驱动式的UI component体系，是一个开放的数据依赖式，非自闭OO对象。它会有以下挑战</p></blockquote><ul><li>render方法可能很大，component显示逻辑是一次性在render里实现的。这里往往有两部分逻辑实现，初次数据绑定，与用户交互之后的算法。</li><li>render出一个ReactElement树，但这个树中的一些组件、UI元素因为计算被前移了，这会导致这个树看起来不太完整，进而不太直观。</li><li>虽然可以分解成小的component，构建大的Component可能是个挑战，因为所有逻辑都依赖于外部数据，而外部数据相对不稳定，组件失去了自我边界的保护，非自闭。</li><li>当交互复杂，组件的state也会越来越大，render全局算法会越来越难写。</li><li>把子组件的行为传上来也是一件不显化的事，往往需要把父组件的一个函数作为回调传给子组件。</li><li>大组件往往有多个Page，这几个Page如何交换数据是个很大的挑战</li></ul><h1 id="版本更新及接口说明"><a href="#版本更新及接口说明" class="headerlink" title="版本更新及接口说明"></a>版本更新及接口说明</h1><h3 id="目前下载的最新版本包含一下文件-原来的react-js被一分为三"><a href="#目前下载的最新版本包含一下文件-原来的react-js被一分为三" class="headerlink" title="目前下载的最新版本包含一下文件,原来的react.js被一分为三"></a>目前下载的最新版本包含一下文件,<strong>原来的react.js被一分为三</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">react.js</span><br><span class="line">react-dom.js</span><br><span class="line">react-dom-server.js</span><br><span class="line">react-with-addons.js</span><br></pre></td></tr></table></figure><h3 id="之前的react-js现在已经被分拆为react-js-react-dom-js-react-dom-server-js三个文件了。"><a href="#之前的react-js现在已经被分拆为react-js-react-dom-js-react-dom-server-js三个文件了。" class="headerlink" title="之前的react.js现在已经被分拆为react.js react-dom.js react-dom-server.js三个文件了。"></a>之前的react.js现在已经被分拆为react.js react-dom.js react-dom-server.js三个文件了。</h3><ul><li><p><code>react.js</code> react包提供了一系列的API，以下列举几个常用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  // 使用ES6的时候可以用这个API来定义一个组件</span><br><span class="line">React.Component</span><br><span class="line">// 创建一个组件类，并作出定义</span><br><span class="line">React.createClass</span><br><span class="line">// 创建并返回一个新的指定类型的 ReactElement</span><br><span class="line">React.createElement</span><br><span class="line">React.cloneElement</span><br><span class="line">// 返回一个生成指定类型 ReactElements 的函数</span><br><span class="line">React.createFactory</span><br><span class="line">// 验证一个对象是否为ReactElement，返回boolean值</span><br><span class="line">React.isValidElement</span><br><span class="line">React.DOM</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li><li><p><code>react-dom.js</code> 提供与 DOM 操作相关的接口，以下列举几个常用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 渲染一个 ReactElement 到 DOM 中，放在 container 指定的 DOM 元素下，返回一个到该组件的引用。</span><br><span class="line">ReactDOM.render</span><br><span class="line">// 从 DOM 中移除已经挂载的 React 组件，清除相应的事件处理器和 state</span><br><span class="line">ReactDOM.unmountComponentAtNode</span><br><span class="line">ReactDOM.findDOMNode</span><br></pre></td></tr></table></figure></li><li><p><code>react-dom-server.js</code> 服务端渲染的几个 API 被独立出来，以下两个是常用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactDOMServer.renderToString</span><br><span class="line">ReactDOMServer.renderToStaticMarkup</span><br></pre></td></tr></table></figure></li><li><p><code>react-with-addons.js</code> React.addons被拆分出若干个独立的包</p><ul><li>说明下，这个文件是官方提供的已封装的一系列插件</li><li>在0.14版本将其中的插件封装成若干个独立的 package提供使用（至少五个，之前版本是直接在一个文件中引用）。</li></ul></li></ul><h3 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h3><p>react-tools 及 JSXTransformer.js 已弃用</p><h3 id="以前是采用JSXTransformer来解析JSX语法，现在是全面拥抱Babel（可以-npm-insttall-babel-g-安装babel进行JSX语法解析、或是加上babel提供的browser-js库进行解析）。"><a href="#以前是采用JSXTransformer来解析JSX语法，现在是全面拥抱Babel（可以-npm-insttall-babel-g-安装babel进行JSX语法解析、或是加上babel提供的browser-js库进行解析）。" class="headerlink" title="以前是采用JSXTransformer来解析JSX语法，现在是全面拥抱Babel（可以 npm insttall babel -g 安装babel进行JSX语法解析、或是加上babel提供的browser.js库进行解析）。"></a>以前是采用JSXTransformer来解析JSX语法，现在是全面拥抱Babel（可以 <code>npm insttall babel -g</code> 安装babel进行JSX语法解析、或是加上babel提供的browser.js库进行解析）。</h3><blockquote><p>如果没接触Babel，请移步这里<a href="https://babeljs.io/" target="_blank" rel="noopener">babeljs.io</a>，Babel是一款强大的语言解析器，基于babel还可以自定义封装自己的解析器插件。</p></blockquote><h1 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h1><blockquote><p>JSX这种混合使用 JavaScript 和 XML 的语言,JSX语法跟 JavaScript不兼容。凡是使用 JSX 的地方，都要加上type=”text/babel”</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Input (JSX):</span></span><br><span class="line"><span class="keyword">var</span> person = &lt;Person name=&#123;window.isLoggedIn ? window.name : ''&#125; /&gt;;</span><br><span class="line">// Output (JS):</span><br><span class="line">var person = React.createElement(</span><br><span class="line">  Person,</span><br><span class="line">  &#123;name: window.isLoggedIn ? window.name : ''&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSX</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;HelloMessage name="John" /&gt;, mountNode);</span><br><span class="line"></span><br><span class="line">//JS</span><br><span class="line">class HelloMessage extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return React.createElement(</span><br><span class="line">      "div",</span><br><span class="line">      null,</span><br><span class="line">      "Hello ",</span><br><span class="line">      this.props.name</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(React.createElement(HelloMessage, &#123; name: "John" &#125;), mountNode);</span><br></pre></td></tr></table></figure><h1 id="组件-API"><a href="#组件-API" class="headerlink" title="组件 API"></a>组件 API</h1><h3 id="ReactComponent"><a href="#ReactComponent" class="headerlink" title="ReactComponent"></a>ReactComponent</h3><p>React 组件实例在渲染的时候创建。这些实例在接下来的渲染中被重复使用，可以在组件方法中通过 this 访问。唯一一种在 React 之外获取 React 组件实例句柄的方式就是保存 <code>React.render</code> 的返回值。在其它组件内，可以使用 <code>refs</code> 得到相同的结果。</p><h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setState(object nextState[, function callback])</span><br></pre></td></tr></table></figure><p>合并 nextState 和当前 state。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 <code>setState</code> 执行完毕并且组件重新渲染完成之后调用。</p><blockquote><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>绝对不要直接改变 <code>this.state</code>，因为在之后调用 <code>setState()</code> 可能会替换掉你做的更改。把 <code>this.state</code> 当做不可变的。<br><code>setState()</code> 不会立刻改变 <code>this.state</code>，而是创建一个即将处理的 state 转变。在调用该方法之后获取 <code>this.state</code> 的值可能会得到现有的值，而不是最新设置的值。<br>不保证 <code>setState()</code> 调用的同步性，为了提升性能，可能会批量执行 state 转变和 DOM 渲染。<br><code>setState()</code> 将总是触发一次重绘，除非在 <code>shouldComponentUpdate()</code> 中实现了条件渲染逻辑。如果使用可变的对象，但是又不能在 <code>shouldComponentUpdate()</code> 中实现这种逻辑，仅在新 state 和之前的 state 存在差异的时候调用 <code>setState()</code> 可以避免不必要的重新渲染。</p></blockquote><h3 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replaceState(object nextState[, function callback])</span><br></pre></td></tr></table></figure><p>类似于 <code>setState()</code>，但是删除之前所有已存在的 state 键，这些键都不在 nextState 中。</p><h3 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate()"></a>forceUpdate()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forceUpdate([function callback])</span><br></pre></td></tr></table></figure><p>如果 <code>render()</code> 方法从 this.props 或者 <code>this.state</code> 之外的地方读取数据，你需要通过调用 <code>forceUpdate()</code> 告诉 React 什么时候需要再次运行 <code>render()</code>。如果直接改变了 <code>this.state</code>，也需要调用 <code>forceUpdate()</code>。<br>调用 <code>forceUpdate()</code> 将会导致 <code>render()</code> 方法在相应的组件上被调用，并且子级组件也会调用自己的 <code>render()</code>，但是如果标记改变了，那么 React 仅会更新 DOM。<br>通常情况下，应该尽量避免所有使用 <code>forceUpdate()</code> 的情况，在 <code>render()</code> 中仅从 this.props 和 this.state 中读取数据。这会使应用大大简化，并且更加高效。</p><h3 id="getDOMNode"><a href="#getDOMNode" class="headerlink" title="getDOMNode"></a>getDOMNode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOMElement getDOMNode()</span><br></pre></td></tr></table></figure><p>如果组件已经挂载到了 DOM 上，该方法返回相应的本地浏览器 DOM 元素。从 DOM 中读取值的时候，该方法很有用，比如获取表单字段的值和做一些 DOM 操作。当 <code>render</code> 返回 null 或者 false 的时候，<code>this.getDOMNode()</code> 返回 null。</p><h3 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted()"></a>isMounted()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool isMounted()</span><br></pre></td></tr></table></figure><p>如果组件渲染到了 DOM 中，<code>isMounted()</code> 返回 true。可以使用该方法保证 <code>setState()</code> 和 <code>forceUpdate()</code> 在异步场景下的调用不会出错。</p><h3 id="setProps"><a href="#setProps" class="headerlink" title="setProps"></a>setProps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setProps(object nextProps[, function callback])</span><br></pre></td></tr></table></figure><p>当和一个外部的 JavaScript 应用集成的时候，你可能想给一个用 <code>React.render()</code> 渲染的组件打上改变的标记。<br>尽管在同一个节点上再次调用 <code>React.render()</code> 来更新根组件是首选的方式，也可以调用 <code>setProps()</code> 来改变组件的属性，触发一次重新渲染。另外，可以传递一个可选的回调函数，该函数将会在 <code>setProps</code> 完成并且组件重新渲染完成之后调用。</p><h3 id="replaceProps"><a href="#replaceProps" class="headerlink" title="replaceProps"></a>replaceProps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replaceProps(object nextProps[, function callback])</span><br></pre></td></tr></table></figure><p>类似于 <code>setProps()</code>，但是删除所有已存在的 props，而不是合并新旧两个 props 对象。</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><blockquote><p>许多方法在组件生命周期中某个确定的时间点执行</p></blockquote><h3 id="挂载-componentWillMount"><a href="#挂载-componentWillMount" class="headerlink" title="挂载: componentWillMount"></a>挂载: componentWillMount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount()</span><br></pre></td></tr></table></figure><p>服务器端和客户端都只调用一次，在初始化渲染执行之前立刻调用。如果在这个方法内调用 <code>setState()</code>，<code>render()</code> 将会感知到更新后的 state，将会执行仅一次，尽管 state 改变了。</p><h3 id="挂载-componentDidMount"><a href="#挂载-componentDidMount" class="headerlink" title="挂载: componentDidMount"></a>挂载: componentDidMount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()</span><br></pre></td></tr></table></figure><p>在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。在生命周期中的这个时间点，组件拥有一个 DOM 展现，你可以通过 <code>this.getDOMNode()</code> 来获取相应 DOM 节点。</p><h3 id="更新：-componentWillReceiveProps"><a href="#更新：-componentWillReceiveProps" class="headerlink" title="更新： componentWillReceiveProps"></a>更新： componentWillReceiveProps</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps()</span><br></pre></td></tr></table></figure><p>在组件接收到新的 props 的时候调用。在初始化渲染的时候，该方法不会调用。<br>用此函数可以作为 react 在 prop 传入之后， <code>render()</code> 渲染之前更新 <code>state</code> 的机会。老的 props 可以通过 <code>this.props</code> 获取到。在该函数中调用 <code>this.setState()</code> 将不会引起第二次渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    likesIncreasing: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于 state，没有相似的方法： componentWillReceiveState。</span><br><span class="line">将要传进来的 prop 可能会引起 state 改变，反之则不然。</span><br><span class="line">如果需要在 state 改变 的时候执行一些操作，</span><br><span class="line">请使用 componentWillUpdate。</span><br></pre></td></tr></table></figure><h3 id="更新：-shouldComponentUpdate"><a href="#更新：-shouldComponentUpdate" class="headerlink" title="更新： shouldComponentUpdate"></a>更新： shouldComponentUpdate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean shouldComponentUpdate(object nextProps, object nextState)</span><br></pre></td></tr></table></figure><p>在接收到新的 props 或者 state，将要渲染之前调用。该方法在初始化渲染的时候不会调用，在使用 <code>forceUpdate</code> 方法的时候也不会。</p><p>如果确定新的 props 和 state 不会导致组件更新，则此处应该 返回 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps, nextState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextProps.id !== <span class="keyword">this</span>.props.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>shouldComponentUpdate</code> 返回 false，则 render() 将不会执行，直到下一次 state 改变。（另外，<code>componentWillUpdate</code> 和 <code>componentDidUpdate</code> 也不会被调用。）<br>默认情况下，<code>shouldComponentUpdate</code> 总会返回 true，在 state 改变的时候避免细微的 bug，但是如果总是小心地把 state 当做不可变的，在 render() 中只从 props 和 state 读取值，此时你可以覆盖 <code>shouldComponentUpdate</code> 方法，实现新老 props 和 state 的比对逻辑。<br>如果性能是个瓶颈，尤其是有几十个甚至上百个组件的时候，使用 <code>shouldComponentUpdate</code> 可以提升应用的性能。</p><h3 id="更新：-componentWillUpdate"><a href="#更新：-componentWillUpdate" class="headerlink" title="更新： componentWillUpdate"></a>更新： componentWillUpdate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUpdate(object nextProps, object nextState)</span><br></pre></td></tr></table></figure><p>在接收到新的 props 或者 state 之前立刻调用。在初始化渲染的时候该方法不会被调用。<br>使用该方法做一些更新之前的准备工作。</p><blockquote><h3 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h3><p>你不能在刚方法中使用 <code>this.setState()</code>。如果需要更新 state 来响应某个 prop 的改变，请使用 <code>componentWillReceiveProps</code>。</p></blockquote><h3 id="更新：-componentDidUpdate"><a href="#更新：-componentDidUpdate" class="headerlink" title="更新： componentDidUpdate"></a>更新： componentDidUpdate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(object prevProps, object prevState)</span><br></pre></td></tr></table></figure><p>在组件的更新已经同步到 DOM 中之后立刻被调用。该方法不会在初始化渲染的时候调用。<br>使用该方法可以在组件更新之后操作 DOM 元素。</p><blockquote><h3 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h3><p>为了兼容 v0.9，DOM 节点会作为最后一个参数传入。如果使用这个方法，你仍然可以使用 <code>this.getDOMNode()</code> 来访问 DOM 节点。</p></blockquote><h3 id="移除：-componentWillUnmount"><a href="#移除：-componentWillUnmount" class="headerlink" title="移除： componentWillUnmount"></a>移除： componentWillUnmount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount()</span><br></pre></td></tr></table></figure><p>在组件从 DOM 中移除的时候立刻被调用。<br>在该方法中执行任何必要的清理，比如无效的定时器，或者清除在 componentDidMount 中创建的 DOM 元素。</p><h1 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h1><blockquote><p>React 框架将所有的UI视为一个简单的状态机，那么任意一个UI场景就是一个状态机中一种状态。根据决定状态的状态机变量的值，React框架渲染出状态机的当前状态—-对于开发者来说，单个UI场景就被渲染出来了。随着状态机变量值的改变，UI状态机也在不停的改变状态，UI场景也随之不停的被重新渲染。这样一个过程可以轻松的做到数据与UI保持一致。<br>单个组件在<code>render</code>时就有组件自身的各个状态的UI视图的渲染的逻辑,调用<code>setState</code>触发<code>render</code>,<code>render</code> 就是单个组件渲染的逻辑</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">createClass</span>(</span>&#123;</span><br><span class="line">  statics: &#123;</span><br><span class="line">    randStateEnum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">5</span>);</span><br><span class="line">      <span class="keyword">let</span> se = StateComponent.stateEnum();</span><br><span class="line">      <span class="keyword">return</span> se[i &lt; se.length ? i : se.length - <span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    stateEnum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  doRand() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      state: StateComponent.randStateEnum(),</span><br><span class="line">      count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getInitialState() &#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;<span class="attr">state</span>: StateComponent.randStateEnum(), <span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.doRand(), <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello &#123;this.props.name&#125;, state:&#123;this.state.state&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;StateComponent name="World" /&gt;, mountNode);</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h3 id="虚拟事件对象"><a href="#虚拟事件对象" class="headerlink" title="虚拟事件对象"></a>虚拟事件对象</h3><blockquote><p>事件处理器将会传入虚拟事件对象的实例，一个对浏览器本地事件的跨浏览器封装。它有和浏览器本地事件相同的属性和方法<br>如果因为一些因素，需要底层的浏览器事件对象，只要使用 nativeEvent 属性就可以获取到它了</p></blockquote><p>每一个虚拟事件对象都有下列的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">boolean bubbles</span><br><span class="line">boolean cancelable</span><br><span class="line">DOMEventTarget currentTarget</span><br><span class="line">boolean defaultPrevented</span><br><span class="line">number eventPhase</span><br><span class="line">boolean isTrusted</span><br><span class="line">DOMEvent nativeEvent</span><br><span class="line"><span class="keyword">void</span> preventDefault()</span><br><span class="line"><span class="keyword">void</span> stopPropagation()</span><br><span class="line">DOMEventTarget target</span><br><span class="line">number timeStamp</span><br><span class="line">string type</span><br></pre></td></tr></table></figure><h3 id="剪贴板事件"><a href="#剪贴板事件" class="headerlink" title="剪贴板事件"></a>剪贴板事件</h3><blockquote><p>onCopy onCut onPaste</p></blockquote><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><blockquote><p>onKeyDown onKeyPress onKeyUp</p></blockquote><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><blockquote><p>onFocus onBlur</p></blockquote><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><blockquote><p>onChange onInput onSubmit</p></blockquote><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><blockquote><p>onClick onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave<br>onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave<br>onMouseMove onMouseOut onMouseOver onMouseUp<br>参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">boolean altKey</span><br><span class="line"><span class="built_in">Number</span> button</span><br><span class="line"><span class="built_in">Number</span> buttons</span><br><span class="line"><span class="built_in">Number</span> clientX</span><br><span class="line"><span class="built_in">Number</span> clientY</span><br><span class="line">boolean ctrlKey</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModifierState</span>(<span class="params">key</span>)</span></span><br><span class="line"><span class="function"><span class="title">boolean</span> <span class="title">metaKey</span></span></span><br><span class="line"><span class="function"><span class="title">Number</span> <span class="title">pageX</span></span></span><br><span class="line"><span class="function"><span class="title">Number</span> <span class="title">pageY</span></span></span><br><span class="line"><span class="function"><span class="title">DOMEventTarget</span> <span class="title">relatedTarget</span></span></span><br><span class="line"><span class="function"><span class="title">Number</span> <span class="title">screenX</span></span></span><br><span class="line"><span class="function"><span class="title">Number</span> <span class="title">screenY</span></span></span><br><span class="line"><span class="function"><span class="title">boolean</span> <span class="title">shiftKey</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><blockquote><p>为了使触摸事件生效，在渲染所有组件之前调用 React.initializeTouchEvents(true)<br>onTouchCancel onTouchEnd onTouchMove onTouchStart</p></blockquote><h3 id="UI-事件"><a href="#UI-事件" class="headerlink" title="UI 事件"></a>UI 事件</h3><blockquote><p>onScroll</p></blockquote><h3 id="鼠标滚轮滚动事件"><a href="#鼠标滚轮滚动事件" class="headerlink" title="鼠标滚轮滚动事件"></a>鼠标滚轮滚动事件</h3><blockquote><p>onWheel</p></blockquote><h1 id="语法糖-Promise"><a href="#语法糖-Promise" class="headerlink" title="语法糖(Promise)"></a>语法糖(Promise)</h1><blockquote><p>参照 <a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rand:'</span> + rand)</span><br><span class="line">    <span class="keyword">if</span>(rand &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      resolve(&#123;<span class="attr">rand</span>:rand, <span class="attr">msg</span>:<span class="string">'猜对了.'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(&#123;<span class="attr">rand</span>:rand, <span class="attr">msg</span>:<span class="string">'不好意思猜错了.'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise.then&gt;&gt;&gt;data:%s'</span>, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise.catch&gt;&gt;&gt;data:%s'</span>, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>xhr-promise.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(req.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fetch</span></span><br><span class="line"><span class="comment">//fetch本身也是返回一个类似 Promise 的对象</span></span><br><span class="line">fetch(<span class="string">"https://www.baidu.com"</span>, &#123;<span class="attr">method</span>: <span class="string">'GET'</span>&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(response.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.trace(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//这个异常也会被后面的 catch 到</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'非200状态码的异常'</span>, response.status)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="built_in">console</span>.trace(error))</span><br></pre></td></tr></table></figure><h1 id="理解和运用mixin"><a href="#理解和运用mixin" class="headerlink" title="理解和运用mixin"></a>理解和运用mixin</h1><hr><blockquote><h3 id="什么是mixin"><a href="#什么是mixin" class="headerlink" title="什么是mixin"></a>什么是mixin</h3><p>mixin是解决代码重复的强大工具之一，它同时还能让组件保持专注于自身的业务逻辑。实际运用中的简单理解就是：她们就是混合进组建类的对象而已。（讲人话：让不同的组件共用同一部分逻辑，实现代码重用）</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件间都需要用到的一段逻辑</span></span><br><span class="line"><span class="comment">// 经常写太麻烦，抽离出来公用</span></span><br><span class="line"><span class="keyword">var</span> stateRecordMixin = &#123;</span><br><span class="line">    componentWillMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oldStates = [];</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">nextProp,nextState</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oldStates.push(nextState);</span><br><span class="line">    &#125;,</span><br><span class="line">    previousState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>.oldStates.length <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> index == <span class="number">-1</span> ? &#123;&#125; : <span class="keyword">this</span>.oldStates[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个组件MessageBox</span></span><br><span class="line"><span class="keyword">var</span> MessageBox = React.createClass(&#123;</span><br><span class="line">  <span class="comment">// 在这里使用mixin</span></span><br><span class="line">    mixins: [stateRecordMixin],</span><br><span class="line">    getInitialState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    doUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="keyword">this</span>.state.count + <span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        alert(<span class="string">'上一次的计数是：'</span>+<span class="keyword">this</span>.previousState().count)</span><br><span class="line">    &#125;,</span><br><span class="line">    render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'渲染'</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1 &gt; 计数： &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.doUpdate&#125;&gt;手动更新一下组件（包括子组件）&lt;/</span>button&gt;</span><br><span class="line">                &lt;Submessage count=&#123;<span class="keyword">this</span>.state.count&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var Submessage = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">    mixins: [stateRecordMixin],</span></span><br><span class="line"><span class="regexp">    getInitialState:function()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            count: 0,</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    componentWillReceiveProps:function(nextProp)&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            count: this.props.count *2,</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    render:function()&#123;</span></span><br><span class="line"><span class="regexp">        console.log('上一次子组件的计数是：'+this.previousState().count )</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;h3&gt;当前子组件的计数是：&#123;this.state.count&#125;&lt;/</span>h3&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用组件</span></span><br><span class="line">ReactDOM.render( &lt;MessageBox/&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="other"><a href="#other" class="headerlink" title="other"></a>other</h1><h3 id="很多js库的开头"><a href="#很多js库的开头" class="headerlink" title="很多js库的开头"></a>很多js库的开头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">factory</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        <span class="comment">// Register as an anonymous AMD module:</span></span><br><span class="line">        define([</span><br><span class="line">            <span class="string">'jquery'</span>,</span><br><span class="line">            <span class="string">'jquery.ui.widget'</span></span><br><span class="line">        ], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">// Node/CommonJS:</span></span><br><span class="line">        factory(</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">'jquery'</span>),</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">'./vendor/jquery.ui.widget'</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Browser globals:</span></span><br><span class="line">        factory(<span class="built_in">window</span>.jQuery);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React的定义与原理&quot;&gt;&lt;a href=&quot;#React的定义与原理&quot; class=&quot;headerlink&quot; title=&quot;React的定义与原理&quot;&gt;&lt;/a&gt;React的定义与原理&lt;/h1&gt;&lt;p&gt;React是一个用于构建用户界面的JavaScript库，而不是一个
      
    
    </summary>
    
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="react-native" scheme="http://rplees.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Ngrok服务端搭建与linux\mac\window客户端的编译</title>
    <link href="http://rplees.com/2016/03/22/ngrok%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA%E4%B8%8Elinux-mac-window%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%BC%96%E8%AF%91/"/>
    <id>http://rplees.com/2016/03/22/ngrok服务端搭建与linux-mac-window客户端的编译/</id>
    <published>2016-03-22T12:20:58.000Z</published>
    <updated>2019-07-16T07:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ngrok-服务编译的前提"><a href="#ngrok-服务编译的前提" class="headerlink" title="ngrok 服务编译的前提"></a>ngrok 服务编译的前提</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://storage.googleapis.com/golang/go1.4.3.linux-amd64.tar.gz</span><br><span class="line">sudo tar -C /usr/<span class="built_in">local</span> -xzf go1.4.3.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre></td></tr></table></figure><h2 id="ngrok-服务端"><a href="#ngrok-服务端" class="headerlink" title="ngrok 服务端"></a>ngrok 服务端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</span><br><span class="line"><span class="built_in">cd</span> ngrok</span><br><span class="line"></span><br><span class="line">openssl genrsa -out rootCA.key 2048;</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">"/CN=ngrok.allji.cn"</span> -days 5000 -out rootCA.pem;</span><br><span class="line">openssl genrsa -out device.key 2048;</span><br><span class="line">openssl req -new -key device.key -subj <span class="string">"/CN=ngrok.allji.cn"</span> -out device.csr;</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000;</span><br><span class="line"></span><br><span class="line">//copy</span><br><span class="line">cp rootCA.pem ../ngrok/assets/client/tls/ngrokroot.crt;</span><br><span class="line">cp device.crt ../ngrok/assets/server/tls/snakeoil.crt;</span><br><span class="line">cp device.key ../ngrok/assets/server/tls/snakeoil.key;</span><br><span class="line"></span><br><span class="line">make release-server</span><br></pre></td></tr></table></figure><h3 id="客户端-windows"><a href="#客户端-windows" class="headerlink" title="客户端 windows"></a>客户端 windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/go/src/;</span><br><span class="line">GOOS=windows GOARCH=386 CGO_ENABLED=0 ./make.bash;</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok;</span><br><span class="line">GOOS=windows GOARCH=386 make release-client;</span><br></pre></td></tr></table></figure><h3 id="客户端-linux"><a href="#客户端-linux" class="headerlink" title="客户端 linux"></a>客户端 linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make release-client;</span><br></pre></td></tr></table></figure><h3 id="客户端-mac"><a href="#客户端-mac" class="headerlink" title="客户端 mac"></a>客户端 mac</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/go/src/;</span><br><span class="line">GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 ./make.bash;</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok;</span><br><span class="line">GOOS=darwin GOARCH=amd64 make release-client;</span><br></pre></td></tr></table></figure><h3 id="客户端-树莓派"><a href="#客户端-树莓派" class="headerlink" title="客户端 树莓派"></a>客户端 树莓派</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/go/src/;</span><br><span class="line">GOOS=linux GOARCH=arm CGO_ENABLED=0 ./make.bash;</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok;</span><br><span class="line">GOOS=linux GOARCH=arm make release-client;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./bin/ngrokd -domain=“ngrok.dou2b.com<span class="string">" -httpAddr="</span>:80<span class="string">" -httpsAddr="</span>:443<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//客户端</span></span><br><span class="line"><span class="string">./ngrok -subdomain "</span>rplees<span class="string">" -config ngrok.cfg 8080</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ngrok.cfg配置:</span></span><br><span class="line"><span class="string">server_addr: "</span>ngrok.dou2b.com:4443<span class="string">"</span></span><br><span class="line"><span class="string">trust_host_root_certs: false</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//是绑定一个rplees.yy.xx.com到本地的8080端口，具体参数相见 ngrok -help</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>用 go1.5 运行会有一些问题，改用1.4的</li><li>如果服务端本身就已经有80、443的端口被占用了，而ngrok映射的地址又不想其他的端口，这时候可以用docker解决(原理就是docker容器的80、433端口映射到服务器上的580、5443端口，在用nginx反向代理解决)</li></ul><h3 id="docker部分"><a href="#docker部分" class="headerlink" title="docker部分"></a>docker部分</h3><h4 id="我的是centos环境安装。其他的请参考官网"><a href="#我的是centos环境安装。其他的请参考官网" class="headerlink" title="我的是centos环境安装。其他的请参考官网"></a>我的是centos环境<a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="noopener">安装</a>。其他的请参考<a href="https://docs.docker.com" target="_blank" rel="noopener">官网</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br><span class="line"></span><br><span class="line">MAINTAINER rplees rplees.i.ly@gmail.com</span><br><span class="line"></span><br><span class="line">ENV NGROK /usr/<span class="built_in">local</span>/ngrok</span><br><span class="line">ENV DOMAIN ngrok.dou2b.com</span><br><span class="line"></span><br><span class="line">EXPOSE 80 443 4443</span><br><span class="line"></span><br><span class="line">COPY bin/ngrokd <span class="variable">$NGROK</span>/</span><br><span class="line">COPY run-ser.sh <span class="variable">$NGROK</span>/</span><br><span class="line"></span><br><span class="line">RUN chmod +x <span class="variable">$NGROK</span>/run-ser.sh</span><br><span class="line"></span><br><span class="line">CMD <span class="variable">$NGROK</span>/run-ser.sh</span><br></pre></td></tr></table></figure><p>保存到Dockerfile</p><h4 id="run-ser-sh"><a href="#run-ser-sh" class="headerlink" title="run-ser.sh"></a>run-ser.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/ngrok/ngrokd -domain ngrok.dou2b.com</span><br></pre></td></tr></table></figure><p>保存到当前的Dockerfile路径的run-ser.sh</p><p>将 /user/local/ngrok/bin/ngrokd 拷贝到当前的Dockerfile路径的 bin/ngrokd</p><p>运行<code>docker build -t rplees/ngrokd .</code>等等执行完成.<br>执行 <code>docker images</code> 查看下现在的容器.</p><p>启动 <code>docker run -d -p 580:80 -p 5443:443 -p 4443:4443 rplees/ngrokd:latest</code><br><code>docker ps -a</code>查看容器的状态<br>查看日志 <code>docker logs &lt;tag&gt;</code></p><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">map <span class="variable">$scheme</span> <span class="variable">$proxy_port</span> &#123;</span><br><span class="line">   <span class="string">"http"</span>  <span class="string">"580"</span>;</span><br><span class="line">    <span class="string">"https"</span> <span class="string">"5443"</span>;</span><br><span class="line">   default <span class="string">"580"</span>;</span><br><span class="line">&#125;</span><br><span class="line">   server &#123;</span><br><span class="line">       listen      80;</span><br><span class="line">       listen      443;</span><br><span class="line">       server_name ngrok.dou2b.com *.ngrok.dou2b.com;</span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass  <span class="variable">$scheme</span>://127.0.0.1:<span class="variable">$proxy_port</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       ssl on;</span><br><span class="line">       ssl_certificate /usr/<span class="built_in">local</span>/ngrok/assets/server/tls/snakeoil.crt;</span><br><span class="line">       ssl_certificate_key /usr/<span class="built_in">local</span>/ngrok/assets/server/tls/snakeoil.key;</span><br><span class="line"></span><br><span class="line">       proxy_set_header    X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">       proxy_set_header    Host <span class="variable">$http_host</span>;</span><br><span class="line">       proxy_set_header    X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">       access_log off;</span><br><span class="line">       log_not_found off;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>###docker操作命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">service docker stop</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">docker ps -a | grep &quot;Exited&quot; | awk &apos;&#123;print $1 &#125;&apos;|xargs docker stop</span><br><span class="line">docker images|grep none|awk &apos;&#123;print $3 &#125;&apos;|xargs docker rmi</span><br><span class="line">docker run -d -p 580:80 -p 5443:443 -p 4443:4443 rplees/ngrokd:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ngrok-服务编译的前提&quot;&gt;&lt;a href=&quot;#ngrok-服务编译的前提&quot; class=&quot;headerlink&quot; title=&quot;ngrok 服务编译的前提&quot;&gt;&lt;/a&gt;ngrok 服务编译的前提&lt;/h2&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
    
      <category term="linux" scheme="http://rplees.com/tags/linux/"/>
    
      <category term="ngrok" scheme="http://rplees.com/tags/ngrok/"/>
    
      <category term="搭建" scheme="http://rplees.com/tags/%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java工程师面试题</title>
    <link href="http://rplees.com/2016/02/25/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://rplees.com/2016/02/25/Java工程师面试题/</id>
    <published>2016-02-25T09:20:58.000Z</published>
    <updated>2019-07-16T07:58:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Java工程师面试题</p><h3 id="1、下面哪些是Thread类的方法（-）"><a href="#1、下面哪些是Thread类的方法（-）" class="headerlink" title="1、下面哪些是Thread类的方法（  ）"></a>1、下面哪些是Thread类的方法（  ）</h3><ul><li>A、start()</li><li>B、 run()   </li><li>C、exit()  </li><li>D、 getPriority()</li></ul><h3 id="2、下列说法正确的有（-）"><a href="#2、下列说法正确的有（-）" class="headerlink" title="2、下列说法正确的有（  ）"></a>2、下列说法正确的有（  ）</h3><ul><li>A． class中的constructor不可省略</li><li>B． constructor必须与class同名，但方法不能与class同名</li><li>C． constructor在一个对象被new时执行</li><li>D．一个class只能定义一个constructor</li></ul><h3 id="3、下面程序的运行结果：（-）"><a href="#3、下面程序的运行结果：（-）" class="headerlink" title="3、下面程序的运行结果：（  ）"></a>3、下面程序的运行结果：（  ）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">        Thread t = new <span class="function"><span class="title">Thread</span></span>() &#123;</span><br><span class="line">            public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                pong();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.run();</span><br><span class="line">        System.out.print(<span class="string">"ping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    static void <span class="function"><span class="title">pong</span></span>() &#123;</span><br><span class="line">        System.out.print(<span class="string">"pong"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>A、pingpong        </li><li>B、pongping       </li><li>C、pingpong和pongping都有可能       </li><li>D、都不输出</li></ul><h3 id="4、GC线程是否为守护线程？（-）"><a href="#4、GC线程是否为守护线程？（-）" class="headerlink" title="4、GC线程是否为守护线程？（  ）"></a>4、GC线程是否为守护线程？（  ）</h3><h3 id="5、volatile关键字是否能保证线程安全？（-）"><a href="#5、volatile关键字是否能保证线程安全？（-）" class="headerlink" title="5、volatile关键字是否能保证线程安全？（  ）"></a>5、volatile关键字是否能保证线程安全？（  ）</h3><h3 id="6、下列说法正确的是（-）"><a href="#6、下列说法正确的是（-）" class="headerlink" title="6、下列说法正确的是（  ）"></a>6、下列说法正确的是（  ）</h3><ul><li>A LinkedList继承自List</li><li>B AbstractSet继承自Set</li><li>C HashSet继承自AbstractSet</li><li>D WeakMap继承自HashMap</li></ul><h3 id="7、存在使i-1-lt-i的数吗（-）"><a href="#7、存在使i-1-lt-i的数吗（-）" class="headerlink" title="7、存在使i + 1 &lt; i的数吗（  ）"></a>7、存在使i + 1 &lt; i的数吗（  ）</h3><h3 id="8、0-6332的数据类型是（-）"><a href="#8、0-6332的数据类型是（-）" class="headerlink" title="8、0.6332的数据类型是（  ）"></a>8、0.6332的数据类型是（  ）</h3><ul><li>A、 float     </li><li>B、 double     </li><li>C、 Float      </li><li>D、 Double</li></ul><h3 id="9、下面哪个流类属于面向字符的输入流（-）"><a href="#9、下面哪个流类属于面向字符的输入流（-）" class="headerlink" title="9、下面哪个流类属于面向字符的输入流（  ）"></a>9、下面哪个流类属于面向字符的输入流（  ）</h3><ul><li>A、  BufferedWriter           </li><li>B、  FileInputStream          </li><li>C、  ObjectInputStream          </li><li>D、  InputStreamReader</li></ul><h3 id="10、不通过构造函数也能创建对象吗（-）"><a href="#10、不通过构造函数也能创建对象吗（-）" class="headerlink" title="10、不通过构造函数也能创建对象吗（  ）"></a>10、不通过构造函数也能创建对象吗（  ）</h3><ul><li>A、是</li><li>B、否</li></ul><h3 id="11、ArrayList-list-new-ArrayList-20-中的list扩充几次（-）"><a href="#11、ArrayList-list-new-ArrayList-20-中的list扩充几次（-）" class="headerlink" title="11、ArrayList list = new ArrayList(20);中的list扩充几次（  ）"></a>11、ArrayList list = new ArrayList(20);中的list扩充几次（  ）</h3><ul><li>A、0</li><li>B、1</li><li>C、2</li><li>D、3<h3 id="12、下面哪些是对称加密算法（-）"><a href="#12、下面哪些是对称加密算法（-）" class="headerlink" title="12、下面哪些是对称加密算法（  ）"></a>12、下面哪些是对称加密算法（  ）</h3></li><li>A、 DES   </li><li>B、 AES   </li><li>C、 DSA   </li><li>D、 RSA</li></ul><h3 id="13、下面程序能正常运行吗（-）"><a href="#13、下面程序能正常运行吗（-）" class="headerlink" title="13、下面程序能正常运行吗（  ）"></a>13、下面程序能正常运行吗（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NULL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ((NULL)<span class="keyword">null</span>).haha();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、下面程序的运行结果是什么（-）"><a href="#14、下面程序的运行结果是什么（-）" class="headerlink" title="14、下面程序的运行结果是什么（  ）"></a>14、下面程序的运行结果是什么（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; System.out.println(<span class="string">"I'm A class"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; System.out.println(<span class="string">"static A"</span>); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloB</span> <span class="keyword">extends</span> <span class="title">HelloA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; System.out.println(<span class="string">"I'm B class"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; System.out.println(<span class="string">"static B"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　　　 <span class="keyword">new</span> HelloB();</span><br><span class="line">　　 &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15、下面代码的运行结果为：（-）"><a href="#15、下面代码的运行结果为：（-）" class="headerlink" title="15、下面代码的运行结果为：（  ）"></a>15、下面代码的运行结果为：（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">foo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s;</span><br><span class="line">        System.out.println(<span class="string">"s="</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A、 代码得到编译，并输出“s=”</li><li>B、 代码得到编译，并输出“s=null”</li><li>C、 由于String s没有初始化，代码不能编译通过</li><li>D、 代码得到编译，但捕获到 NullPointException异常</li></ul><h3 id="16、-System-out-println-“5”-2-的输出结果应该是（-）"><a href="#16、-System-out-println-“5”-2-的输出结果应该是（-）" class="headerlink" title="16、 System.out.println(“5” + 2);的输出结果应该是（  ）"></a>16、 System.out.println(“5” + 2);的输出结果应该是（  ）</h3><ul><li>A、 52                   </li><li>B、 7                     </li><li>C、 2                     </li><li>D、 5</li></ul><h3 id="17、指出下列程序的运行结果（-）"><a href="#17、指出下列程序的运行结果（-）" class="headerlink" title="17、指出下列程序的运行结果（  ）"></a>17、指出下列程序的运行结果（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Example ex = <span class="keyword">new</span> Example();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.print(ex.str + <span class="string">" and "</span>);</span><br><span class="line">        System.out.print(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        str = <span class="string">"test ok"</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'g'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A、 good and abc</li><li>B、 good and gbc</li><li>C、 test ok and abc</li><li>D、 test ok and gbc</li></ul><h3 id="18、下列哪种异常是检查型异常，需要在编写程序时声明-（-）"><a href="#18、下列哪种异常是检查型异常，需要在编写程序时声明-（-）" class="headerlink" title="18、下列哪种异常是检查型异常，需要在编写程序时声明 （  ）"></a>18、下列哪种异常是检查型异常，需要在编写程序时声明 （  ）</h3><ul><li>A、 NullPointerException        </li><li>B、 ClassCastException      </li><li>C、 FileNotFoundException       </li><li>D、 IndexOutOfBoundsException</li></ul><h3 id="19、下面的方法，当输入为2的时候返回值是多少-（-）"><a href="#19、下面的方法，当输入为2的时候返回值是多少-（-）" class="headerlink" title="19、下面的方法，当输入为2的时候返回值是多少?（  ）"></a>19、下面的方法，当输入为2的时候返回值是多少?（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            result = result + i;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            result = result + i * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            result = result + i * <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>A、 0</li><li>B、 2</li><li>C、 4</li><li>D、 10</li></ul><h3 id="20、选项中哪一行代码可以替换题目中-add-code-here而不产生编译错误？（-）"><a href="#20、选项中哪一行代码可以替换题目中-add-code-here而不产生编译错误？（-）" class="headerlink" title="20、选项中哪一行代码可以替换题目中//add code here而不产生编译错误？（  ）"></a>20、选项中哪一行代码可以替换题目中//add code here而不产生编译错误？（  ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> constInt = <span class="number">5</span>;</span><br><span class="line">     <span class="comment">//add code here</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对？为什么？"><a href="#21、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对？为什么？" class="headerlink" title="21、两个对象值相同(x.equals(y)==true),但却可有不同的hash code,这句话对不对？为什么？"></a>21、两个对象值相同(x.equals(y)==true),但却可有不同的hash code,这句话对不对？为什么？</h3><h3 id="22、”组合优于继承”，是否同意这句话，并阐述你的观点。"><a href="#22、”组合优于继承”，是否同意这句话，并阐述你的观点。" class="headerlink" title="22、”组合优于继承”，是否同意这句话，并阐述你的观点。"></a>22、”组合优于继承”，是否同意这句话，并阐述你的观点。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Java工程师面试题&lt;/p&gt;
&lt;h3 id=&quot;1、下面哪些是Thread类的方法（-）&quot;&gt;&lt;a href=&quot;#1、下面哪些是Thread类的方法（-）&quot; class=&quot;headerlink&quot; title=&quot;1、下面哪些是Thread类的方法（  ）&quot;&gt;&lt;/a&gt;1、下面哪些
      
    
    </summary>
    
    
      <category term="面试" scheme="http://rplees.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://rplees.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java工程师面试题-有答案</title>
    <link href="http://rplees.com/2016/02/25/Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%9C%89%E7%AD%94%E6%A1%88/"/>
    <id>http://rplees.com/2016/02/25/Java工程师面试题-有答案/</id>
    <published>2016-02-25T09:20:58.000Z</published>
    <updated>2019-07-16T07:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Java工程师面试题-有答案</p><h3 id="1、下面哪些是Thread类的方法（-ABD-）"><a href="#1、下面哪些是Thread类的方法（-ABD-）" class="headerlink" title="1、下面哪些是Thread类的方法（ ABD ）"></a>1、下面哪些是Thread类的方法（ ABD ）</h3><ul><li>A、start()</li><li>B、 run()   </li><li>C、exit()  </li><li>D、 getPriority()</li></ul><h3 id="2、下列说法正确的有（-C-）"><a href="#2、下列说法正确的有（-C-）" class="headerlink" title="2、下列说法正确的有（ C ）"></a>2、下列说法正确的有（ C ）</h3><ul><li>A． class中的constructor不可省略</li><li>B． constructor必须与class同名，但方法不能与class同名</li><li>C． constructor在一个对象被new时执行</li><li>D．一个class只能定义一个constructor</li></ul><h3 id="3、下面程序的运行结果：（-B-）"><a href="#3、下面程序的运行结果：（-B-）" class="headerlink" title="3、下面程序的运行结果：（ B ）"></a>3、下面程序的运行结果：（ B ）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">        Thread t = new <span class="function"><span class="title">Thread</span></span>() &#123;</span><br><span class="line">            public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">                pong();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t.run();</span><br><span class="line">        System.out.print(<span class="string">"ping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    static void <span class="function"><span class="title">pong</span></span>() &#123;</span><br><span class="line">        System.out.print(<span class="string">"pong"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>A、pingpong        </li><li>B、pongping       </li><li>C、pingpong和pongping都有可能       </li><li>D、都不输出</li></ul><h3 id="4、GC线程是否为守护线程？（-是-）"><a href="#4、GC线程是否为守护线程？（-是-）" class="headerlink" title="4、GC线程是否为守护线程？（ 是 ）"></a>4、GC线程是否为守护线程？（ 是 ）</h3><p><strong><em>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>守护线程最典型的应用就是 GC (垃圾回收器)</em></strong></p><h3 id="5、volatile关键字是否能保证线程安全？（不能）"><a href="#5、volatile关键字是否能保证线程安全？（不能）" class="headerlink" title="5、volatile关键字是否能保证线程安全？（不能）"></a>5、volatile关键字是否能保证线程安全？（不能）</h3><p>***volatile关键字用在多线程同步中，可保证读取的可见性，JVM只是保证从主内存加载到线程工作内存的值是最新的读取值，而非cache中。但多个线程对</p><p>volatile的写操作，无法保证线程安全。例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，那么都会加载这个最新的值，在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6；线程2由于已经进行read,load操作，在进行运算之后，也会更新主内存count的变量值为6；导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。***</p><h3 id="6、下列说法正确的是（AC）"><a href="#6、下列说法正确的是（AC）" class="headerlink" title="6、下列说法正确的是（AC）"></a>6、下列说法正确的是（AC）</h3><ul><li>A LinkedList继承自List</li><li>B AbstractSet继承自Set</li><li>C HashSet继承自AbstractSet</li><li>D WeakMap继承自HashMap</li></ul><h3 id="7、存在使i-1-lt-i的数吗（存在）"><a href="#7、存在使i-1-lt-i的数吗（存在）" class="headerlink" title="7、存在使i + 1 &lt; i的数吗（存在）"></a>7、存在使i + 1 &lt; i的数吗（存在）</h3><p>***如果i为int型，那么当i为int能表示的最大整数时，i+1就溢出变成负数了，此时不就&lt;i了吗。</p><p>扩展：存在使i &gt; j || i &lt;= j不成立的数吗<br>存在、比如Double.NaN或Float.NaN***</p><h3 id="8、0-6332的数据类型是（B）"><a href="#8、0-6332的数据类型是（B）" class="headerlink" title="8、0.6332的数据类型是（B）"></a>8、0.6332的数据类型是（B）</h3><ul><li>A、 float     </li><li>B、 double     </li><li>C、 Float      </li><li>D、 Double</li></ul><p><strong><em>默认为double型，如果为float型需要加上f显示说明，即0.6332f</em></strong></p><h3 id="9、下面哪个流类属于面向字符的输入流（-D-）"><a href="#9、下面哪个流类属于面向字符的输入流（-D-）" class="headerlink" title="9、下面哪个流类属于面向字符的输入流（ D ）"></a>9、下面哪个流类属于面向字符的输入流（ D ）</h3><ul><li>A、  BufferedWriter           </li><li>B、  FileInputStream          </li><li>C、  ObjectInputStream          </li><li>D、  InputStreamReader</li></ul><h3 id="10、不通过构造函数也能创建对象吗（-A-）"><a href="#10、不通过构造函数也能创建对象吗（-A-）" class="headerlink" title="10、不通过构造函数也能创建对象吗（ A ）"></a>10、不通过构造函数也能创建对象吗（ A ）</h3><ul><li>A、是</li><li>B、否</li></ul><p>***Java创建对象的几种方式-重要：</p><p>(1) 用new语句创建对象，这是最常见的创建对象的方法。<br>(2) 运用反射手段,调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。<br>(3) 调用对象的clone()方法。<br>(4) 运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法。</p><p>(1)和(2)都会明确的显式的调用构造函数 ；(3)是在内存上对已有对象的影印，所以不会调用构造函数 ；(4)是从文件中还原类的对象，也不会调用构造函数。***</p><h3 id="11、ArrayList-list-new-ArrayList-20-中的list扩充几次（A）"><a href="#11、ArrayList-list-new-ArrayList-20-中的list扩充几次（A）" class="headerlink" title="11、ArrayList list = new ArrayList(20);中的list扩充几次（A）"></a>11、ArrayList list = new ArrayList(20);中的list扩充几次（A）</h3><ul><li>A、0</li><li>B、1</li><li>C、2</li><li>D、3<h3 id="12、下面哪些是对称加密算法（-AB-）"><a href="#12、下面哪些是对称加密算法（-AB-）" class="headerlink" title="12、下面哪些是对称加密算法（ AB ）"></a>12、下面哪些是对称加密算法（ AB ）</h3></li><li>A、 DES   </li><li>B、 AES   </li><li>C、 DSA   </li><li>D、 RSA</li></ul><h3 id="13、下面程序能正常运行吗（-能-）"><a href="#13、下面程序能正常运行吗（-能-）" class="headerlink" title="13、下面程序能正常运行吗（ 能 ）"></a>13、下面程序能正常运行吗（ 能 ）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NULL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ((NULL)<span class="keyword">null</span>).haha();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、下面程序的运行结果是什么（）"><a href="#14、下面程序的运行结果是什么（）" class="headerlink" title="14、下面程序的运行结果是什么（）"></a>14、下面程序的运行结果是什么（）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; System.out.println(<span class="string">"I'm A class"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; System.out.println(<span class="string">"static A"</span>); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloB</span> <span class="keyword">extends</span> <span class="title">HelloA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; System.out.println(<span class="string">"I'm B class"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123; System.out.println(<span class="string">"static B"</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　　　 <span class="keyword">new</span> HelloB();</span><br><span class="line">　　 &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>***答案：</p><p>static A<br>static B<br>I’m A class<br>HelloA<br>I’m B class<br>HelloB***</p><h3 id="15、下面代码的运行结果为：（C）"><a href="#15、下面代码的运行结果为：（C）" class="headerlink" title="15、下面代码的运行结果为：（C）"></a>15、下面代码的运行结果为：（C）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">foo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s;</span><br><span class="line">        System.out.println(<span class="string">"s="</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A、 代码得到编译，并输出“s=”</li><li>B、 代码得到编译，并输出“s=null”</li><li>C、 由于String s没有初始化，代码不能编译通过</li><li>D、 代码得到编译，但捕获到 NullPointException异常</li></ul><h3 id="16、-System-out-println-“5”-2-的输出结果应该是（-A-）"><a href="#16、-System-out-println-“5”-2-的输出结果应该是（-A-）" class="headerlink" title="16、 System.out.println(“5” + 2);的输出结果应该是（ A ）"></a>16、 System.out.println(“5” + 2);的输出结果应该是（ A ）</h3><ul><li>A、 52                   </li><li>B、 7                     </li><li>C、 2                     </li><li>D、 5</li></ul><h3 id="17、指出下列程序的运行结果（B）"><a href="#17、指出下列程序的运行结果（B）" class="headerlink" title="17、指出下列程序的运行结果（B）"></a>17、指出下列程序的运行结果（B）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Example ex = <span class="keyword">new</span> Example();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.print(ex.str + <span class="string">" and "</span>);</span><br><span class="line">        System.out.print(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        str = <span class="string">"test ok"</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'g'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A、 good and abc</li><li>B、 good and gbc</li><li>C、 test ok and abc</li><li>D、 test ok and gbc</li></ul><h3 id="18、下列哪种异常是检查型异常，需要在编写程序时声明-（-C-）"><a href="#18、下列哪种异常是检查型异常，需要在编写程序时声明-（-C-）" class="headerlink" title="18、下列哪种异常是检查型异常，需要在编写程序时声明 （ C ）"></a>18、下列哪种异常是检查型异常，需要在编写程序时声明 （ C ）</h3><ul><li>A、 NullPointerException        </li><li>B、 ClassCastException      </li><li>C、 FileNotFoundException       </li><li>D、 IndexOutOfBoundsException</li></ul><h3 id="19、下面的方法，当输入为2的时候返回值是多少-（）"><a href="#19、下面的方法，当输入为2的时候返回值是多少-（）" class="headerlink" title="19、下面的方法，当输入为2的时候返回值是多少?（）"></a>19、下面的方法，当输入为2的时候返回值是多少?（）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            result = result + i;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            result = result + i * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            result = result + i * <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>A、 0</li><li>B、 2</li><li>C、 4</li><li>D、 10</li></ul><h3 id="20、选项中哪一行代码可以替换题目中-add-code-here而不产生编译错误？（A）"><a href="#20、选项中哪一行代码可以替换题目中-add-code-here而不产生编译错误？（A）" class="headerlink" title="20、选项中哪一行代码可以替换题目中//add code here而不产生编译错误？（A）"></a>20、选项中哪一行代码可以替换题目中//add code here而不产生编译错误？（A）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> constInt = <span class="number">5</span>;</span><br><span class="line">     <span class="comment">//add code here</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对？为什么？"><a href="#21、两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对？为什么？" class="headerlink" title="21、两个对象值相同(x.equals(y)==true),但却可有不同的hash code,这句话对不对？为什么？"></a>21、两个对象值相同(x.equals(y)==true),但却可有不同的hash code,这句话对不对？为什么？</h3><h3 id="22、”组合优于继承”，是否同意这句话，并阐述你的观点。"><a href="#22、”组合优于继承”，是否同意这句话，并阐述你的观点。" class="headerlink" title="22、”组合优于继承”，是否同意这句话，并阐述你的观点。"></a>22、”组合优于继承”，是否同意这句话，并阐述你的观点。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Java工程师面试题-有答案&lt;/p&gt;
&lt;h3 id=&quot;1、下面哪些是Thread类的方法（-ABD-）&quot;&gt;&lt;a href=&quot;#1、下面哪些是Thread类的方法（-ABD-）&quot; class=&quot;headerlink&quot; title=&quot;1、下面哪些是Thread类的方法（ AB
      
    
    </summary>
    
    
      <category term="面试" scheme="http://rplees.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://rplees.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText 3 搭建 React.js 开发环境</title>
    <link href="http://rplees.com/2016/02/17/sublime-text-3%E6%90%AD%E5%BB%BA-react.js-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://rplees.com/2016/02/17/sublime-text-3搭建-react.js-开发环境/</id>
    <published>2016-02-17T03:20:58.000Z</published>
    <updated>2019-07-16T08:00:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载来源"><a href="#转载来源" class="headerlink" title="转载来源"></a><a href="http://www.cnblogs.com/terrylin/p/4942332.html" target="_blank" rel="noopener">转载来源</a></h2><h2 id="Sublime-Text-3-搭建-React-js-开发环境"><a href="#Sublime-Text-3-搭建-React-js-开发环境" class="headerlink" title="Sublime Text 3 搭建 React.js 开发环境"></a>Sublime Text 3 搭建 React.js 开发环境</h2><p>Sublime有很强的自定义功能，插件库很庞大，针对新语言插件更新很快，配合使用可以快速搭建适配语言的开发环境。</p><h2 id="babel-sublime"><a href="#babel-sublime" class="headerlink" title="babel-sublime"></a><a href="http://www.cnblogs.com/terrylin/p/4942332.html" target="_blank" rel="noopener">babel-sublime</a></h2><p>支持ES6， React.js, jsx代码高亮，对 JavaScript, jQuery 也有很好的扩展。关于 babel 的更多介绍可以看这里：<a href="http://www.infoq.com/cn/news/2015/05/ES6-TypeScript" target="_blank" rel="noopener">为什么说Babel将推动JavaScript的发展</a></p><p>安装</p><ul><li><p>PC：Ctrl+shift+p</p></li><li><p>Mac：Cmd+shift+p<br>打开面板输入babel安装</p></li></ul><p>配置</p><ul><li><p>打开.js, .jsx 后缀的文件;</p></li><li><p>打开菜单view， Syntax -&gt; Open all with current extension as… -&gt; Babel -&gt; JavaScript (Babel)，选择babel为默认 javascript 打开syntax</p></li></ul><h2 id="sublimeLinter-jsxhint"><a href="#sublimeLinter-jsxhint" class="headerlink" title="sublimeLinter-jsxhint"></a><a href="https://packagecontrol.io/packages/SublimeLinter-jsxhint" target="_blank" rel="noopener">sublimeLinter-jsxhint</a></h2><p>JSX 代码审查，实时提示语法错误, 帮助快速定位错误点.<br><img src="http://segmentfault.com/img/bVoMHA" alt="代码提示" title="代码提示 Title"><br>安装</p><ul><li><p>PC上ctrl+shift+p（MacCmd+shift+p）打开面板输入sublimeLinter-jsx安装(依赖于 sublimeLinter)</p></li><li><p>安装 node.js</p></li><li><p>安装 <a href="https://github.com/STRML/JSXHint/" target="_blank" rel="noopener">jsxhint</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jsxhint</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改-Emmet-兼容jsx-文件"><a href="#修改-Emmet-兼容jsx-文件" class="headerlink" title="修改 Emmet 兼容jsx 文件"></a>修改 <a href="http://docs.emmet.io/" target="_blank" rel="noopener">Emmet</a> 兼容jsx 文件</h2><p>emmet 作为前端开发必备插件之一非常方便快捷，通过修改默认的 sublime就可以在 jsx 文件中快速通过 emmet 编写自定义组件。<br><img src="http://segmentfault.com/img/bVoMHB" alt="emmet" title="emmet Title"><br>安装</p><ul><li>PC上ctrl+shift+p（MacCmd+shift+p）打开面板输入emmet安装</li></ul><p>使用方法</p><p>打开 preferences -&gt; Key bindings - Users，把下面代码复制到[]内部。</p><pre><code>{  &quot;keys&quot;: [    &quot;super+e&quot;  ],  &quot;args&quot;: {    &quot;action&quot;: &quot;expand_abbreviation&quot;  },  &quot;command&quot;: &quot;run_emmet_action&quot;,  &quot;context&quot;: [{    &quot;key&quot;: &quot;emmet_action_enabled.expand_abbreviation&quot;  }]},{  &quot;keys&quot;: [&quot;tab&quot;],  &quot;command&quot;: &quot;expand_abbreviation_by_tab&quot;,  &quot;context&quot;: [{    &quot;operand&quot;: &quot;source.js&quot;,    &quot;operator&quot;: &quot;equal&quot;,    &quot;match_all&quot;: true,    &quot;key&quot;: &quot;selector&quot;  }, {    &quot;key&quot;: &quot;preceding_text&quot;,    &quot;operator&quot;: &quot;regex_contains&quot;,    &quot;operand&quot;: &quot;(\\b(a\\b|div|span|p\\b|button)(\\.\\w*|&gt;\\w*)?([^}]*?}$)?)&quot;,    &quot;match_all&quot;: true  }, {    &quot;key&quot;: &quot;selection_empty&quot;,    &quot;operator&quot;: &quot;equal&quot;,    &quot;operand&quot;: true,    &quot;match_all&quot;: true  }]}    </code></pre><p>使用super+e触发 emmet；正则判断用 a，div，span，p，button标签默认tab 触发；默认 class 修改为 className。</p><p>注：</p><ul><li><p>supre+e 在 PC 上指的是win+e（pc 建议修改为emmet 默认按键 ctrl+e）,在 mac 上指的是cmd+e</p></li><li><p>以上规则来源于<a href="http://stackoverflow.com/questions/26089802/in-sublime-text-3-how-do-you-enable-emmet-for-jsx-files" target="_blank" rel="noopener">StackOverflow</a>，正则小有修改</p></li></ul><h2 id="JsFormat-格式化-js-代码"><a href="#JsFormat-格式化-js-代码" class="headerlink" title="JsFormat 格式化 js 代码"></a><a href="https://github.com/jdc0589/JsFormat" target="_blank" rel="noopener">JsFormat</a> 格式化 js 代码</h2><p>jsformat 是 sublime 上 js 格式化比较好用的插件之一，通过修改它的e4x 属性可以使它支持 jsx。</p><p>安装</p><ul><li>PC上ctrl+shift+p（MacCmd+shift+p）打开面板输入JsFormat安装.<br>使用</li></ul><p>打开preferences -&gt; Package Settings -&gt; JsFormat -&gt; Setting - Users,输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"e4x"</span>: <span class="literal">true</span>,</span><br><span class="line">  // jsformat options</span><br><span class="line">  <span class="string">"format_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可保存时自动格式化，并支持 jsx 类型文件.</p><h2 id="编译-jsx"><a href="#编译-jsx" class="headerlink" title="编译 jsx"></a>编译 jsx</h2><ul><li>使用<a href="https://packagecontrol.io/packages/Babel" target="_blank" rel="noopener">babel-sublime</a></li><li>带有编译 jsx 的命令 babel build。使用 babel 编译 jsx 也由 React 项目官方引用。该命令依赖于 node 包 <a href="https://babeljs.io/" target="_blank" rel="noopener">babel</a>。babel 同时也支持 ES6的新语法经过编译在浏览器中运用。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel</span><br></pre></td></tr></table></figure></li></ul><p>在 sublime 中使用ctrl+shift+p打开面板输入babel transform自动编译成 react.js 文件</p><ul><li>使用自动化构建工具（gulp|grunt 等）<br>以 <a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a> 为例(依赖 <a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a>,需提前安装)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-babel</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* babel</span><br><span class="line">*/</span><br><span class="line">var gulp = require(<span class="string">'gulp'</span>),</span><br><span class="line">  babel = require(<span class="string">'gulp-babel'</span>);</span><br><span class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> gulp.src(<span class="string">'./src/**/*.jsx'</span>)</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在命令行中输入 gulp babel 运行<br>配合 BrowserSync 使用可以实时监测改动并同步刷新多平台上得浏览器。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-babel gulp-plumber gulp-notify gulp-cached browser-sync run-sequence</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*  babel</span><br><span class="line">*/</span><br><span class="line">var gulp = require(<span class="string">'gulp'</span>),</span><br><span class="line">  babel = require(<span class="string">'gulp-babel'</span>),</span><br><span class="line">  bs = require(<span class="string">'browser-sync'</span>).create(),</span><br><span class="line">  reload = bs.reload,</span><br><span class="line">  runSequence = require(<span class="string">'run-sequence'</span>).use(gulp),</span><br><span class="line">  src = <span class="string">'src'</span>, //源目录路径</span><br><span class="line">  dist = <span class="string">'dist'</span>; //输出路径</span><br><span class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  var onError = <span class="keyword">function</span>(err) &#123;</span><br><span class="line">    notify.onError(&#123;</span><br><span class="line">      title: <span class="string">"Gulp"</span>,</span><br><span class="line">      subtitle: <span class="string">"Failure!"</span>,</span><br><span class="line">      message: <span class="string">"Error: &lt;%= error.message %&gt;"</span>,</span><br><span class="line">      sound: <span class="string">"Beep"</span></span><br><span class="line">    &#125;)(err);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> gulp.src(src + <span class="string">'/**/*.jsx'</span>)</span><br><span class="line">    .pipe(cached(<span class="string">'react'</span>)) //把所有东西放入缓存中，每次只编译修改过的文件</span><br><span class="line">    .pipe(plumber(&#123; //发生错误时不会中断 gulp 的流程，同时触发 notify 消息提示</span><br><span class="line">      errorHandler: onError</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(gulp.dest(dist));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Start the server</span><br><span class="line">gulp.task(<span class="string">'bs'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  var files;</span><br><span class="line"></span><br><span class="line">  files = [</span><br><span class="line">    src + <span class="string">'/**/*.+(html|php|js|css|png|jpg|svg|gif)'</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  bs.init(files, &#123;</span><br><span class="line">  server: &#123;</span><br><span class="line">    baseDir: src,</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'server'</span>, [<span class="string">'babel'</span>,<span class="string">'bs'</span>], <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  gulp.watch(src + <span class="string">'/**/*.jsx'</span>, <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    runSequence(<span class="string">'babel'</span>, reload);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>在命令行中输入 gulp server 运行。</p><p>或者使用 sublime 自带的 build 工具，选择Tools -&gt; Build System -&gt; New Build System<br>输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;shell_cmd&quot;: &quot;gulp server --cwd $file_path&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并保存为 gulpBabel.sublime-build(名称随意，保持.sublime-build后缀名)，存放到Packages - Users文件夹里面，在 sublime 中使用ctrl+shift+b（或Tools -&gt; Build With ..）打开 build 面板，选择刚刚输入的名称，在这里是gulpBabel运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转载来源&quot;&gt;&lt;a href=&quot;#转载来源&quot; class=&quot;headerlink&quot; title=&quot;转载来源&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/terrylin/p/4942332.html&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="搭建" scheme="http://rplees.com/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="sublimetext" scheme="http://rplees.com/tags/sublimetext/"/>
    
      <category term="react" scheme="http://rplees.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative环境搭建</title>
    <link href="http://rplees.com/2016/01/14/react-native%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://rplees.com/2016/01/14/react-native环境搭建/</id>
    <published>2016-01-14T03:20:58.000Z</published>
    <updated>2019-07-16T07:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native环境搭建"><a href="#React-Native环境搭建" class="headerlink" title="React Native环境搭建"></a>React Native环境搭建</h2><h3 id="前期准备环境"><a href="#前期准备环境" class="headerlink" title="前期准备环境"></a>前期准备环境</h3><h4 id="brew-安装"><a href="#brew-安装" class="headerlink" title="brew 安装"></a><a href="http://brew.sh/" target="_blank" rel="noopener">brew</a> 安装</h4><p>brew 在官方网站对brew的用法进行了详细的描述,是一款更方便的下载软件库的软件，类似于centos的yum。<br>安装方法：在Mac中打开Termal:  输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)</span>"</span></span><br></pre></td></tr></table></figure><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br><span class="line">brew uninstall wget</span><br><span class="line">brew search /wge*/</span><br></pre></td></tr></table></figure><h4 id="node-js-安装"><a href="#node-js-安装" class="headerlink" title="node.js 安装"></a><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> 安装</h4><h6 id="以下是官方定义"><a href="#以下是官方定义" class="headerlink" title="以下是官方定义:"></a>以下是官方定义:</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node.js® is a JavaScript runtime built on Chrome<span class="string">'s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js'</span> package ecosystem, npm, is the largest ecosystem of open <span class="built_in">source</span> libraries <span class="keyword">in</span> the world.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmp 是 node的一个三方管理工具，相当于 Ruby中的RubyGems，iOS中的 CocoaPods，Java中的 Gradle/Maven，基本上，它使您能够轻松下载和管理你的项目需要的任何依赖库。</span><br></pre></td></tr></table></figure><h6 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法:"></a>安装方法:</h6><hr><ul><li>官方下载安装</li><li>通过brew安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></li></ul><h4 id="react-navtive等的安装："><a href="#react-navtive等的安装：" class="headerlink" title="react-navtive等的安装："></a>react-navtive等的安装：</h4><h5 id="接下来安装watchman"><a href="#接下来安装watchman" class="headerlink" title="接下来安装watchman"></a>接下来安装<a href="https://facebook.github.io/watchman/" target="_blank" rel="noopener">watchman</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure><h5 id="接下来安装react-native-cli-如果权限不足需要sudo"><a href="#接下来安装react-native-cli-如果权限不足需要sudo" class="headerlink" title="接下来安装react-native-cli(如果权限不足需要sudo)"></a>接下来安装react-native-cli(如果权限不足需要sudo)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><h5 id="创建第一个项目并运行"><a href="#创建第一个项目并运行" class="headerlink" title="创建第一个项目并运行"></a>创建第一个项目并运行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init FirstReactNative --verbose(能看到详细信息和进度，就是npm的安装进度)</span><br></pre></td></tr></table></figure><h5 id="成功后控制打印"><a href="#成功后控制打印" class="headerlink" title="成功后控制打印"></a><em>成功后控制打印</em></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">This will walk you through creating a new React Native project <span class="keyword">in</span> /Users/rplees/work/git/react-native/FirstReactNative</span><br><span class="line">Installing react-native package from npm...</span><br><span class="line">Setting up new React Native app <span class="keyword">in</span> /Users/rplees/work/git/react-native/FirstReactNative</span><br><span class="line">To run your app on iOS:</span><br><span class="line">   Open /Users/rplees/work/git/react-native/FirstReactNative/ios/FirstReactNative.xcodeproj <span class="keyword">in</span> Xcode</span><br><span class="line">   Hit the Run button</span><br><span class="line">To run your app on Android:</span><br><span class="line">   Have an Android emulator running (quickest way to get started), or a device connected</span><br><span class="line">   <span class="built_in">cd</span> /Users/rplees/work/git/react-native/FirstReactNative</span><br><span class="line">   react-native run-android</span><br></pre></td></tr></table></figure><h5 id="运行-ios"><a href="#运行-ios" class="headerlink" title="运行 ios"></a>运行 ios</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Now open any example (the .xcodeproj file <span class="keyword">in</span> each of the Examples subdirectories) and hit Run <span class="keyword">in</span> Xcode.(需要打开xcode编译项目再运行)</span><br></pre></td></tr></table></figure><h4 id="运行-android-需要安装-Android-SDK"><a href="#运行-android-需要安装-Android-SDK" class="headerlink" title="运行 android  需要安装 Android SDK"></a>运行 android  <em>需要安装</em> <a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/README.md#prerequisites" target="_blank" rel="noopener">Android SDK</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><h6 id="运行watchman的时候抛错"><a href="#运行watchman的时候抛错" class="headerlink" title="运行watchman的时候抛错"></a>运行watchman的时候抛错</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">192:FirstReactNative rplees$ sudo watchman</span><br><span class="line">Password:</span><br><span class="line">dyld: Library not loaded: /usr/<span class="built_in">local</span>/lib/libpcre.1.dylib</span><br><span class="line">  Referenced from: /usr/<span class="built_in">local</span>/bin/watchman</span><br><span class="line">  Reason: image not found</span><br><span class="line">192:FirstReactNative rplees$ npm uninstall watchman</span><br><span class="line">192:FirstReactNative rplees$ watchman</span><br><span class="line">dyld: Library not loaded: /usr/<span class="built_in">local</span>/lib/libpcre.1.dylib</span><br><span class="line">  Referenced from: /usr/<span class="built_in">local</span>/bin/watchman</span><br><span class="line">  Reason: image not found</span><br></pre></td></tr></table></figure><h5 id="经过一番搜索，发现是pcre找不到，通过如下命令即可修复："><a href="#经过一番搜索，发现是pcre找不到，通过如下命令即可修复：" class="headerlink" title="经过一番搜索，发现是pcre找不到，通过如下命令即可修复："></a>经过一番搜索，发现是pcre找不到，通过如下命令即可修复：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall pcre &amp;&amp; brew install pcre</span><br></pre></td></tr></table></figure><h6 id="运行npm-start的时候抛错"><a href="#运行npm-start的时候抛错" class="headerlink" title="运行npm start的时候抛错"></a>运行npm start的时候抛错</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">'root'</span> of null</span><br><span class="line">这个问题困扰很久，后来才发现是watchman版本的问题</span><br><span class="line">brew update &amp;&amp; brew upgrade watchman 就解决了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native环境搭建&quot;&gt;&lt;a href=&quot;#React-Native环境搭建&quot; class=&quot;headerlink&quot; title=&quot;React Native环境搭建&quot;&gt;&lt;/a&gt;React Native环境搭建&lt;/h2&gt;&lt;h3 id=&quot;前期准备环境&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://rplees.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="搭建" scheme="http://rplees.com/tags/%E6%90%AD%E5%BB%BA/"/>
    
      <category term="react-native" scheme="http://rplees.com/tags/react-native/"/>
    
  </entry>
  
</feed>
